Index: MSP/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render, redirect, get_object_or_404\r\nfrom django.utils import timezone\r\nfrom .models import Lesson, Hometask, Exam, Settings, Time, Image, Day, Subject, Plan, Holiday\r\nfrom .forms import SubjectForm, LessonForm, SettingsForm, TimeForm, TaskForm, SemesterForm, ExamForm, PlanForm, \\\r\n    SignUpForm, LogInForm, TaskMobileForm\r\nfrom datetime import datetime, date, timedelta, time\r\nfrom .syllables import syllables, shorten\r\nfrom django.contrib.auth import login, authenticate\r\nimport random\r\nfrom django.core.mail import send_mail\r\nimport json\r\nfrom django.contrib.auth.forms import UserCreationForm\r\nfrom django.contrib.auth.models import User\r\n\r\nfrom django.shortcuts import HttpResponse\r\nfrom django import template\r\n\r\nweekdays = ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье']\r\nweekdays_short = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс']\r\nmonths = [\"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Октябрь\", \"Ноябрь\",\r\n          \"Декабрь\"]\r\ncolors = [\"#FF67F9\", \"#CA34FF\", \"#179EFF\", \"#3DD8FA\", \"#00FEEF\", \"#00FEA3\", \"#80FE6C\", \"#D0FF4B\", \"#FAFF00\",\r\n          \"#F8E438\", \"#FECC6C\", \"#FF8C4B\", \"#FE5A36\", \"#E4364B\"]\r\nsub_colors = [\"#FFAFFC\", \"#E3BBFB\", \"#70C3FF\", \"#ADF0FF\", \"#ACFEF9\", \"#85FFD3\", \"#98FF88\", \"#E0FB93\", \"#FDFF8B\",\r\n              \"#FFF281\", \"#F9D591\", \"#FFA673\", \"#FF8165\", \"#F66D7D\"]\r\npalette = dict(zip(colors, sub_colors))\r\nseconds_in_day = 60 * 60 * 24\r\nseconds_in_week = seconds_in_day * 7\r\n\r\n\r\ndef shorten_title(t):\r\n    if len(t) > 20:\r\n        title = t.split(' ')\r\n        for i in range(len(title)):\r\n            title[i] = shorten(title[i])\r\n        return ''.join(title)\r\n    return t\r\n\r\n\r\ndef create_lessons(subject, lesson):\r\n    if not lesson.teacher:\r\n        lesson.teacher = subject.teacher\r\n    if not lesson.teachershort:\r\n        lesson.teachershort = subject.teachershort\r\n    if not lesson.classroom:\r\n        lesson.classroom = subject.classroom\r\n    if not lesson.image:\r\n        lesson.image = subject.image\r\n    if not lesson.title_short:\r\n        lesson.title_short = subject.title_short\r\n    lesson.weekday = subject.weekday\r\n    lesson.color = subject.color\r\n    return lesson\r\n\r\n\r\ndef password_reset(request):\r\n    pass\r\n\r\n\r\ndef signup(request):\r\n    if request.method == 'POST':\r\n        form = SignUpForm(request.POST)\r\n        if form.is_valid():\r\n            form.save()\r\n            username = form.cleaned_data.get('username')\r\n            raw_password = form.cleaned_data.get('password1')\r\n            user = authenticate(username=username, password=raw_password)\r\n            login(request, user)\r\n            Settings.objects.create(owner=user)\r\n            settings = Settings.objects.get(owner=user)\r\n            settings.start_date = datetime.strptime('01.09.2021', '%d.%m.%Y')\r\n            settings.end_date = datetime.strptime('31.01.2022', '%d.%m.%Y')\r\n            settings.save()\r\n            return redirect('start')\r\n    else:\r\n        form = SignUpForm()\r\n    return render(request, 'registration/signup.html', {'form': form})\r\n\r\n\r\ndef create_times(settings, user):\r\n    first_delta = settings.first_lesson_start\r\n    lesson_delta = timedelta(minutes=settings.lesson_length)\r\n    break_delta = timedelta(minutes=settings.break_length)\r\n    for i in range(settings.max_lessons):\r\n        time = Time()\r\n        time.number = i + 1\r\n        time.start_time = (\r\n                datetime.combine(date.today(), first_delta) + lesson_delta * i + break_delta * i).time()\r\n        time.end_time = (datetime.combine(date.today(),\r\n                                          first_delta) + lesson_delta * time.number + break_delta * i).time()\r\n        time.owner = user\r\n        time.save()\r\n\r\n\r\ndef load_subjects_ics(link):\r\n    from icalendar import Calendar\r\n    import re\r\n    from django.contrib.staticfiles.storage import staticfiles_storage\r\n    with open(staticfiles_storage.url(f'calendars/{link}'), 'r', encoding='utf-8') as g:\r\n        gcal = Calendar.from_ical(g.read())\r\n        for component in gcal.walk():\r\n            if component.name == 'VEVENT':\r\n                subject = Subject()\r\n                fullname = str(component.get('summary'))\r\n                subject.type = str(re.findall('(\\(.*?\\))', fullname)[-1].strip('()'))\r\n                subject.title = fullname.replace(f'({subject.type})', '').rstrip(' ')\r\n                subject.start_time = component.decoded('dtstart').astimezone().strftime(\"%H:%M\")\r\n                subject.end_time = component.decoded('dtend').astimezone().strftime(\"%H:%M\")\r\n                subject.weekday = component.decoded('dtstart').weekday()\r\n                subject.teacher = str(component.get('description')).replace('Преподаватель: ', '')\r\n                subject.color = random.choice(colors)\r\n                try:\r\n                    subject.classroom = re.findall('[а-я]?\\d+[а-я]?', str(component.get('location')))[0]\r\n                except:\r\n                    subject.classroom = str(component.get('location'))\r\n\r\n\r\ndef load_subjects_html(group, user, settings):\r\n    import requests\r\n    from bs4 import BeautifulSoup\r\n    if len(Time.objects.filter(owner=user)) == 0:\r\n        settings.first_lesson_start = datetime.strptime('09:00', '%H:%M').time()\r\n        settings.lesson_length = 95\r\n        settings.break_length = 15\r\n        settings.max_lessons = 7\r\n        settings.repeating_weeks = 2\r\n        create_times(settings, user)\r\n    timetable = requests.post(f'https://table.nsu.ru/group/{group}/').text\r\n    soup = BeautifulSoup(timetable, 'html.parser')\r\n    table = soup.find(class_='time-table')\r\n    time = 0\r\n    for row in table.find_all('tr'):\r\n        columns = row.find_all('td')\r\n        if columns:\r\n            start_time = columns[0].string\r\n            time += 1\r\n            for i in range(1, len(columns)):\r\n                if columns[i].find_all(class_='cell'):\r\n                    subject = Subject()\r\n                    subject.owner = user\r\n                    subject.time = time\r\n                    subject_time = Time.objects.get(owner=user, number=time)\r\n                    subject.start_time = subject_time.start_time\r\n                    subject.end_time = subject_time.end_time\r\n                    subject.weekday = i - 1\r\n                    subject.title = columns[i].find(class_='subject')['title']\r\n                    try:\r\n                        subject.classroom = columns[i].find(class_='room').find('a').string\r\n                    except:\r\n                        subject.classroom = columns[i].find(class_='room').string.strip(' \\r')\r\n                        if subject.classroom == 'Ауд. Спортивный комплекс':\r\n                            subject.classroom = 'спорт. комплекс'\r\n                    if columns[i].find(class_='tutor'):\r\n                        subject.teachershort = columns[i].find(class_='tutor').string\r\n                        subject.teacher = subject.teachershort\r\n                    subject.title_short = columns[i].find(class_='subject').string\r\n                    subject.type = columns[i].find(class_=re.compile('type'))['title']\r\n                    if subject.type == 'практическое занятие':\r\n                        subject.type = 'практ. занятие'\r\n                    weeks = columns[i].find(class_='week')\r\n                    if weeks:\r\n                        week = weeks.string\r\n                        if week == ' Нечетная':\r\n                            subject.weeks = '1'\r\n                        if week == ' Четная':\r\n                            subject.weeks = '2'\r\n                    else:\r\n                        subject.weeks = '12'\r\n                    similar = Subject.objects.filter(title=subject.title, owner=user)\r\n                    if len(similar) > 0:\r\n                        subject.color = similar[0].color\r\n                        subject.image = similar[0].image\r\n                    else:\r\n                        subject.color = random.choice(colors)\r\n                        # subject.image = f'/static/images/icons/{random.choice(Image.objects.all()).path}'\r\n                    subject.save()\r\n                    days = Day.objects.filter(owner=user).order_by('date')\r\n                    if settings.exams_date:\r\n                        exams_start = settings.exams_date\r\n                    else:\r\n                        exams_start = settings.end_date\r\n                    for day in days:\r\n                        if day.date <= exams_start:\r\n                            day_week = day.week % settings.repeating_weeks\r\n                            if day_week == 0:\r\n                                day_week = settings.repeating_weeks\r\n                            day_week = str(day_week)\r\n                            if day.weekday == subject.weekday and day_week in subject.weeks:\r\n                                lesson = Lesson()\r\n                                lesson = create_lessons(subject, lesson)\r\n                                lesson.select_subject = subject\r\n                                lesson.title = subject.title\r\n                                lesson.time = subject.time\r\n                                lesson.start_time = subject.start_time\r\n                                lesson.end_time = subject.end_time\r\n                                lesson.date = day.date\r\n                                lesson.type = subject.type\r\n                                lesson.owner = user\r\n                                lesson.save()\r\n\r\n\r\ndef get_today(user):\r\n    try:\r\n        today = Day.objects.get(date=datetime.today(), owner=user)\r\n    except:\r\n        start_point = Day.objects.filter(weekday=datetime.today().weekday()).order_by('date')[0].date\r\n        count_week = 1 + (datetime.now().timestamp() - int(\r\n            datetime.combine(start_point, datetime.now().time()).timestamp())) / seconds_in_week\r\n        today = Day.objects.create(date=datetime.today(), owner=user, weekday=datetime.today().weekday(),\r\n                                   week=count_week)\r\n    return today\r\n\r\n\r\ndef get_day(user, date):\r\n    try:\r\n        day = Day.objects.get(date=date, owner=user)\r\n    except:\r\n        start_point = Day.objects.filter(weekday=date.weekday()).order_by('date')[0].date\r\n        now = datetime.combine(date, datetime.now().time())\r\n        count_week = 1 + (now.timestamp() - int(\r\n            datetime.combine(start_point, datetime.now().time()).timestamp())) / seconds_in_week\r\n        day = Day.objects.create(date=date, owner=user, weekday=date.weekday(),\r\n                                 week=count_week)\r\n    return day\r\n\r\n\r\ndef get_tomorrow(user):\r\n    try:\r\n        tomorrow = Day.objects.get(date=datetime.today() + timedelta(days=1), owner=user)\r\n    except:\r\n        tomorrow = None\r\n        # start_point = Day.objects.filter(weekday=datetime.today().weekday()).order_by('date')[0].date\r\n        # count_week = 1 + (datetime.now().timestamp() - int(datetime.combine(start_point, datetime.now().time()).timestamp())+seconds_in_day) / seconds_in_week\r\n        # tomorrow = Day.objects.create(date=datetime.today() + timedelta(days=1), owner=user, week=count_week, weekday=datetime.today().weekday())\r\n    return tomorrow\r\n\r\n\r\ndef start(request):\r\n    with open('MSP/universities.json', 'r', encoding='utf-8') as js:\r\n        universities = json.load(js)\r\n    nsu = False\r\n    nsu_import = False\r\n    step = \"dates\"\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    settings = get_object_or_404(Settings, owner=user)\r\n    settings_form = SettingsForm(instance=settings)\r\n    semester_form = SemesterForm(instance=settings)\r\n    schedule = Time.objects.filter(owner=user)\r\n    schedule_forms = []\r\n    for time in schedule:\r\n        schedule_forms.append(TimeForm(request.POST, instance=time))\r\n    palette = dict(zip(colors, sub_colors))\r\n    if request.method == \"POST\":\r\n        if \"save_color\" in request.POST:\r\n            step = 'appearance'\r\n            settings.theme = request.POST[\"color\"]\r\n            settings.sub_color = palette[settings.theme]\r\n            settings.save()\r\n            return redirect('subjects')\r\n        if \"save_dates\" in request.POST:\r\n            step = 'university'\r\n            f = 0\r\n            semester_form = SemesterForm(request.POST, instance=settings)\r\n            if semester_form.has_changed():\r\n                semester = semester_form.save(commit=False)\r\n                semester.save()\r\n                settings.start_date = semester.start_date\r\n                settings.end_date = semester.end_date\r\n                settings.save()\r\n                Day.objects.filter(owner=user).delete()\r\n                gap = settings.start_date.weekday()\r\n                start_monday = settings.start_date - timedelta(days=gap)\r\n                gap = 7 - settings.end_date.weekday()\r\n                end_sunday = settings.end_date + timedelta(days=gap)\r\n                start_date = int(datetime.combine(start_monday, datetime.now().time()).timestamp())\r\n                end_date = int(datetime.combine(end_sunday, datetime.now().time()).timestamp())\r\n                d = start_date\r\n                week = 1\r\n                while d <= end_date:\r\n                    day = Day()\r\n                    day.date = datetime.fromtimestamp(d).date()\r\n                    day.weekday = datetime.fromtimestamp(d).weekday()\r\n                    day.week = week\r\n                    day.owner = user\r\n                    day.save()\r\n                    if day.weekday == 6:\r\n                        week += 1\r\n                    d += 86400\r\n            try:\r\n                settings.exams_date = request.POST['exams_date']\r\n                settings.save()\r\n            except:\r\n                pass\r\n            for i in range(8):\r\n                try:\r\n                    holiday_start = request.POST[f'holiday_start{i}']\r\n                    holiday_end = request.POST[f'holiday_end{i}']\r\n                    holiday = Holiday(start_date=holiday_start, end_date=holiday_end, owner=user)\r\n                    holiday.save()\r\n                    settings.holidays.add(holiday)\r\n                    settings.save()\r\n                except:\r\n                    pass\r\n\r\n        elif \"save_auto\" in request.POST:\r\n            step = \"schedule\"\r\n            settings_form = SettingsForm(request.POST, instance=settings)\r\n            if settings_form.is_valid():\r\n                settings = settings_form.save(commit=False)\r\n                settings.save()\r\n                schedule.delete()\r\n                create_times(settings, user)\r\n                for time in schedule:\r\n                    time_form = TimeForm(request.POST, instance=time)\r\n                    if time_form.is_valid():\r\n                        time_form = time_form.save(commit=False)\r\n                        time_form.save()\r\n        elif \"save_manual\" in request.POST:\r\n            step = \"schedule\"\r\n            for time in schedule:\r\n                time_form = TimeForm(request.POST, instance=time)\r\n                if time_form.is_valid():\r\n                    time = time_form.save(commit=False)\r\n                    time.start_time = request.POST[\"start_time\" + str(time.number)]\r\n                    time.end_time = request.POST[\"end_time\" + str(time.number)]\r\n                    time.owner = user\r\n                    time.save()\r\n        elif \"save_university\" in request.POST:\r\n            settings.university = request.POST[\"select_university\"]\r\n            if request.POST[\"other\"] == \"True\":\r\n                settings.university = request.POST[\"other_university\"]\r\n            settings.save()\r\n            if settings.university == 'Новосибирский государственный университет (НГУ)':\r\n                step = \"import\"\r\n            else:\r\n                step = \"schedule\"\r\n        elif \"import_timetable\" in request.POST:\r\n            group = request.POST['group']\r\n            load_subjects_html(group, user, settings)\r\n            step = \"appearance\"\r\n            nsu_import = True\r\n        elif \"move_to_last\" in request.POST:\r\n            step = \"appearance\"\r\n\r\n    else:\r\n        start_date = Day.objects.get(date=settings.start_date, owner=user)\r\n        end_date = Day.objects.get(date=settings.end_date, owner=user)\r\n    return redirect(settings)\r\n    return render(request, 'MSP/start.html',\r\n                  {'semester_form': semester_form, 'step': step, 'schedule': schedule, 'schedule_forms': schedule_forms,\r\n                   'settings': settings, 'settings_form': settings_form, 'nsu': nsu, 'colors': colors,\r\n                   'nsu_import': nsu_import, 'universities': universities, 'compliment_colors': palette})\r\n\r\n\r\ndef dashboard(request):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n        settings = Settings.objects.get(owner=user)\r\n        today = get_today(user)\r\n        if 'timetable' in settings.homepage:\r\n            return redirect(settings.homepage, pk=today.pk)\r\n        else:\r\n            return redirect(settings.homepage)\r\n    else:\r\n        return redirect('dashboard')\r\n\r\n\r\ndef info(request, pk):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    lesson = get_object_or_404(Lesson, pk=pk)\r\n    hometasks = Hometask.objects.filter(lesson=lesson)\r\n    exams = Exam.objects.filter(lesson=lesson)\r\n    time_now = datetime.now().time()\r\n    today = get_today(user)\r\n    if request.method == \"GET\":\r\n        for task in hometasks:\r\n            if ('done_' + str(task.pk)) in request.GET:\r\n                done = request.GET['done_' + str(task.pk)]\r\n                task.done = done == 'True'\r\n                task.save()\r\n    return render(request, 'MSP/info.html',\r\n                  {'lesson': lesson, 'hometasks': hometasks, 'exams': exams, 'time_now': time_now, 'today': today})\r\n\r\n\r\ndef notes_lesson(request, pk):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    settings = Settings.objects.get(owner=user)\r\n    lesson = get_object_or_404(Lesson, pk=pk)\r\n    if request.method == \"POST\":\r\n        form = LessonForm(request.POST, instance=lesson)\r\n        if form.is_valid():\r\n            lesson = form.save(commit=False)\r\n            lesson.save(update_fields=['notes'])\r\n            return redirect('notes_lesson', pk=pk)\r\n    else:\r\n        form = LessonForm(instance=lesson)\r\n    return render(request, 'MSP/notes.html', {'form': form, 'pk': pk, 'settings': settings})\r\n\r\n\r\ndef notes_task(request, pk):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    settings = Settings.objects.get(owner=user)\r\n    task = get_object_or_404(Hometask, pk=pk)\r\n    if request.method == \"POST\":\r\n        form = TaskForm(request.POST, instance=task)\r\n        if form.is_valid():\r\n            task = form.save(commit=False)\r\n            task.save(update_fields=['notes'])\r\n            task = get_object_or_404(Hometask, pk=pk)\r\n            return redirect('info', pk=task.lesson.pk)\r\n    else:\r\n        form = TaskForm(instance=task)\r\n    return render(request, 'MSP/notes.html', {'form': form, 'pk': pk, 'settings': settings})\r\n\r\n\r\ndef notes_exam(request, pk):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    settings = Settings.objects.get(owner=user)\r\n    exam = get_object_or_404(Exam, pk=pk)\r\n    if request.method == \"POST\":\r\n        form = TaskForm(request.POST, instance=exam)\r\n        if form.is_valid():\r\n            exam = form.save(commit=False)\r\n            exam.save(update_fields=['notes'])\r\n            exam = get_object_or_404(Exam, pk=pk)\r\n            return redirect('notes_exam', pk=pk)\r\n    else:\r\n        form = TaskForm(instance=exam)\r\n    return render(request, 'MSP/notes.html', {'form': form, 'pk': pk, 'settings': settings, 'exam': exam})\r\n\r\n\r\ndef notes_plan(request, pk):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    settings = Settings.objects.get(owner=user)\r\n    plan = get_object_or_404(Plan, pk=pk)\r\n    if request.method == \"POST\":\r\n        form = TaskForm(request.POST, instance=plan)\r\n        if form.is_valid():\r\n            plan = form.save(commit=False)\r\n            plan.save(update_fields=['notes'])\r\n            plan = get_object_or_404(Plan, pk=pk)\r\n            return redirect('notes_plan', pk=pk)\r\n    else:\r\n        form = TaskForm(instance=plan)\r\n    return render(request, 'MSP/notes.html', {'form': form, 'pk': pk, 'settings': settings, 'plan': 'plan'})\r\n\r\n\r\ndef import_timetable(request):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    settings = Settings.objects.get(owner=user)\r\n    today = Day.objects.get(date=datetime.today(), owner=user)\r\n    if request.method == \"POST\":\r\n        group = request.POST['group']\r\n        load_subjects_html(group, user, settings)\r\n        return redirect('subjects')\r\n    else:\r\n        return render(request, 'MSP/import.html', {'settings': settings, 'today': today})\r\n\r\n\r\ndef open_timetable(request):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    today = get_today(user)\r\n    return redirect('timetable', pk=today.pk)\r\n\r\n\r\ndef open_table(request, function):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    today = get_today(user)\r\n    settings = Settings.objects.get(owner=user)\r\n    if settings.start_date <= today.date <= settings.end_date:\r\n        return redirect(function, pk=today.pk)\r\n    elif today.date < settings.start_date:\r\n        start_date = Day.objects.get(date=settings.start_date, owner=user)\r\n        return redirect(function, pk=start_date.pk)\r\n    elif today.date > settings.end_date:\r\n        end_date = Day.objects.get(date=settings.end_date, owner=user)\r\n        return redirect(function, pk=end_date.pk)\r\n\r\n\r\ndef open_timetable_week(request):\r\n    print('1')\r\n    return redirect('open_table', function='timetable_week')\r\n\r\n\r\ndef open_timetable_month(request):\r\n    return redirect('open_table', function='timetable_month')\r\n\r\n\r\ndef timetable(request, pk):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    settings = Settings.objects.get(owner=user)\r\n    times = Time.objects.filter(owner=user)\r\n    days = Day.objects.filter(owner=user).order_by('date')\r\n    day = get_object_or_404(Day, pk=pk)\r\n    if request.method == 'POST':\r\n        go_to_date = request.POST['go_to_date_real']\r\n        go_to_date = datetime.strptime(go_to_date, '%Y-%m-%d').date()\r\n        go = get_day(user, go_to_date)\r\n        return redirect('timetable', pk=go.pk)\r\n        try:\r\n            go_to_date = request.POST['go_to_date_real']\r\n            go = get_day(user, go_to_date)\r\n            return redirect('timetable', pk=go.pk)\r\n        except:\r\n            pass\r\n\r\n    lessons = Lesson.objects.filter(owner=user, date=day.date).order_by('start_time')\r\n    show_windows = dict(zip([time.number for time in times], [[] for i in range(settings.max_lessons)]))\r\n    for time in times:\r\n        for lesson in lessons:\r\n            if lesson.time == time.number:\r\n                show_windows[time.number].append(lesson)\r\n    i = -1\r\n    while -i < len(show_windows):\r\n        key = list(show_windows.keys())[i]\r\n        if show_windows[key] == []:\r\n            show_windows[key] = 'delete'\r\n        else:\r\n            break\r\n        i -= 1\r\n    for key in tuple(show_windows.keys()):\r\n        if show_windows[key] == 'delete':\r\n            del show_windows[key]\r\n    first_lesson_today = 1\r\n    key = 1\r\n    while (key <= len(show_windows.keys())):\r\n        if show_windows[key] != []:\r\n            break\r\n        key += 1\r\n    if len(lessons) == 0:\r\n        weekend = True\r\n    else:\r\n        weekend = False\r\n    if list(show_windows.values()) == []:\r\n        toggle = 0\r\n    else:\r\n        toggle = 1\r\n    today = get_today(user)\r\n    time_now = datetime.now().time()\r\n    date = day.date\r\n    weeknum = day.weekday\r\n    weekday = weekdays[weeknum]\r\n    hometasks = Hometask.objects.filter(lesson__in=lessons)\r\n    dict_lessons = {lesson.pk: 0 for lesson in lessons}\r\n    for hometask in hometasks:\r\n        dict_lessons.update({hometask.lesson.pk: hometask.pk})\r\n    hometasks = hometasks.filter(pk__in=dict_lessons.values())\r\n    exams = Exam.objects.filter(owner=user)\r\n    if request.method == \"GET\":\r\n        for task in hometasks:\r\n            if ('done_' + str(task.pk) + '_0') in request.GET:\r\n                done = request.GET['done_' + str(task.pk) + '_0']\r\n                task.done = done == 'True'\r\n                task.save()\r\n            if ('done_' + str(task.pk) + '_1') in request.GET:\r\n                done = request.GET['done_' + str(task.pk) + '_1']\r\n                task.done = done == 'True'\r\n                task.save()\r\n    yesterday = Day.objects.filter(pk__lt=day.pk, owner=user)\r\n    tomorrow = Day.objects.filter(pk__gt=day.pk, owner=user)\r\n    start_date = Day.objects.get(date=settings.start_date, owner=user)\r\n    end_date = Day.objects.get(date=settings.end_date, owner=user)\r\n    holiday = False\r\n    for h in settings.holidays.all():\r\n        if h.start_date <= day.date <= h.end_date:\r\n            holiday = True\r\n    user_agent = request.META['HTTP_USER_AGENT']\r\n    template = 'MSP/timetable_boot.html'\r\n    mobile = True\r\n    if 'Mobile' in user_agent:\r\n        mobile = True\r\n        # template='MSP/timetable_mobile.html'\r\n    return render(request, template,\r\n                  {'mobile': mobile, 'lessons': lessons, 'hometasks': hometasks, 'exams': exams, 'date': date,\r\n                   'weekday': weekday,\r\n                   'weeknum': weeknum, 'settings': settings, 'day': day, 'pk': day.pk, 'today': today,\r\n                   'show_windows': show_windows, 'times': times, 'first_lesson_today': key, 'time_now': time_now,\r\n                   'weekend': weekend, 'toggle': toggle, 'days': days, 'yesterday': yesterday, 'tomorrow': tomorrow,\r\n                   'start_date': start_date, 'end_date': end_date, 'holiday': holiday})\r\n\r\n\r\ndef lesson_new(request, fix_day):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    subjects = Subject.objects.filter(owner=user)\r\n    today = Day.objects.get(date=datetime.today(), owner=user)\r\n    settings = Settings.objects.get(owner=user)\r\n    if request.method == \"POST\":\r\n        form = LessonForm(request.POST)\r\n        object_fields = {}\r\n        form_filednames = [field for field in form.fields]\r\n        if form.is_valid():\r\n            lesson = form.save(commit=False)\r\n            for field in Lesson._meta.fields:\r\n                if field.name in form_filednames and field.name != 'select_subject':\r\n                    object_fields.update({field.name: field})\r\n            try:\r\n                lesson.date = request.POST[\"date\"]\r\n            except:\r\n                pass\r\n            for field in object_fields:\r\n                var = request.POST[field]\r\n                object_fields[field] = var\r\n            subject_pk = request.POST[\"subject\"]\r\n            lesson.select_subject = subjects.get(pk=subject_pk)\r\n            try:\r\n                lesson_time = Time.objects.get(number=lesson.time, owner=user)\r\n                if not lesson.start_time and lesson_time:\r\n                    lesson.start_time = lesson_time.start_time\r\n                    lesson.end_time = lesson_time.end_time\r\n            except:\r\n                pass\r\n            try:\r\n                if not lesson.end_time and lesson_time:\r\n                    lesson_delta = timedelta(minutes=settings.lesson_length)\r\n                    lesson.end_time = (datetime.combine(date.today(), lesson.start_time) + lesson_delta).time()\r\n            except:\r\n                pass\r\n            subject = lesson.select_subject\r\n            if subject:\r\n                lesson.title = lesson.select_subject.title\r\n                lesson.time = subject.time\r\n                lesson.type = subject.type\r\n                if not lesson.start_time:\r\n                    lesson.start_time = subject.start_time\r\n                if not lesson.end_time:\r\n                    lesson.end_time = subject.end_time\r\n                lesson = create_lessons(subject, lesson)\r\n            if lesson.teacher:\r\n                teacher = lesson.teacher.split(' ')\r\n                try:\r\n                    lesson.teachershort = ''.join([teacher[0], ' ', teacher[1][0], '.', teacher[2][0], '.'])\r\n                except:\r\n                    lesson.teachershort = lesson.teacher\r\n            else:\r\n                lesson.teachershort = ''\r\n            if lesson.title:\r\n                lesson.title_short = shorten_title(lesson.title)\r\n            lesson.date = datetime.strptime(lesson.date, '%Y-%m-%d')\r\n            lesson.weekday = lesson.date.weekday()\r\n            lesson.owner = user\r\n            lesson.save()\r\n            return redirect('timetable', pk=fix_day)\r\n    else:\r\n        try:\r\n            fix_day = Day.objects.get(pk=fix_day).date\r\n        except:\r\n            fix_day = None\r\n        form = LessonForm({\"user\": user})\r\n    start_date = Day.objects.get(date=settings.start_date, owner=user)\r\n    end_date = Day.objects.get(date=settings.end_date, owner=user)\r\n    template = 'MSP/lesson_edit_boot.html'\r\n    user_agent = request.META['HTTP_USER_AGENT']\r\n    mobile = True\r\n    if 'Mobile' in user_agent:\r\n        mobile = True\r\n    return render(request, template,\r\n                  {'form': form, 'colors': colors, 'settings': settings, 'today': today,\r\n                   'subjects': subjects, 'start_date': start_date, 'end_date': end_date, 'date': fix_day,\r\n                   'mobile': mobile})\r\n\r\n\r\ndef lesson_edit(request, pk, page, fix_day):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    subjects = Subject.objects.filter(owner=user)\r\n    today = Day.objects.get(date=datetime.today(), owner=user)\r\n    settings = Settings.objects.get(owner=user)\r\n    lesson = get_object_or_404(Lesson, pk=pk)\r\n    title_initial = lesson.title\r\n    subject_initial = lesson.select_subject\r\n    title_initial = lesson.title\r\n    type_initial = lesson.type\r\n    color_initial = lesson.color\r\n    teacher_initial = lesson.teacher\r\n    classroom_initial = lesson.classroom\r\n    if request.method == \"POST\":\r\n        form = LessonForm(request.POST, instance=lesson)\r\n        object_fields = {}\r\n        form_filednames = [field for field in form.fields]\r\n        if form.is_valid():\r\n            lesson = form.save(commit=False)\r\n            lesson.save()\r\n            for field in lesson._meta.fields:\r\n                if field.name in form_filednames and field.name != 'select_subject':\r\n                    object_fields.update({field.name: field})\r\n            try:\r\n                lesson.date = request.POST[\"date\"]\r\n            except:\r\n                pass\r\n            if lesson.teacher:\r\n                teacher = lesson.teacher.split(' ')\r\n                try:\r\n                    lesson.teachershort = ''.join([teacher[0], ' ', teacher[1][0], '.', teacher[2][0], '.'])\r\n                except:\r\n                    pass\r\n            else:\r\n                lesson.teachershort = ''\r\n            for field in object_fields:\r\n                var = request.POST[field]\r\n                object_fields[field] = var\r\n            lesson.save()\r\n            lesson.date = datetime.strptime(lesson.date, '%Y-%m-%d')\r\n            lesson.weekday = lesson.date.weekday()\r\n            lesson.save()\r\n\r\n            try:\r\n                lesson_time = Time.objects.get(number=lesson.time, owner=user)\r\n                if lesson_time:\r\n                    lesson.start_time = lesson_time.start_time\r\n                    lesson.end_time = lesson_time.end_time\r\n                    lesson.save()\r\n            except:\r\n                pass\r\n            try:\r\n                if not lesson.end_time and lesson_time:\r\n                    lesson_delta = timedelta(minutes=settings.lesson_length)\r\n                    lesson.end_time = (datetime.combine(date.today(), lesson.start_time) + lesson_delta).time()\r\n                    lesson.save()\r\n            except:\r\n                pass\r\n\r\n            if lesson.title and lesson.title != title_initial:\r\n                lesson.title_short = shorten_title(lesson.title)\r\n                lesson.save()\r\n            try:\r\n                subject_pk = request.POST[\"subject\"]\r\n                subject = subjects.get(pk=subject_pk)\r\n                if subject != subject_initial:\r\n                    lesson.select_subject = subject\r\n                    if lesson.title == title_initial:\r\n                        lesson.title = subject.title\r\n                        lesson.title_short = subject.title_short\r\n                    if lesson.type == type_initial:\r\n                        lesson.type = subject.type\r\n                    if lesson.color == color_initial:\r\n                        lesson.color = subject.color\r\n                    if lesson.teacher == teacher_initial:\r\n                        lesson.teacher = subject.teacher\r\n                        lesson.teachershort = subject.teachershort\r\n                    if lesson.classroom == classroom_initial:\r\n                        lesson.classroom = subject.classroom\r\n                    lesson.save()\r\n            except:\r\n                pass\r\n\r\n            return redirect(page, pk=fix_day)\r\n    else:\r\n        form = LessonForm(instance=lesson, initial={\"user\": user})\r\n        start_date = Day.objects.get(date=settings.start_date, owner=user)\r\n        end_date = Day.objects.get(date=settings.end_date, owner=user)\r\n    template = 'MSP/lesson_edit_boot.html'\r\n    user_agent = request.META['HTTP_USER_AGENT']\r\n    mobile = True\r\n    if 'Mobile' in user_agent:\r\n        mobile = True\r\n    return render(request, template,\r\n                  {'pk': lesson.pk, 'form': form, 'colors': colors, 'lesson': lesson, 'settings': settings,\r\n                   'today': today, 'subjects': subjects, 'page': page, 'fix_day': fix_day, 'start_date': start_date,\r\n                   'end_date': end_date, 'mobile': mobile})\r\n\r\n\r\ndef lesson_delete(request, pk, page, fix_day):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    today = Day.objects.get(date=datetime.today(), owner=user)\r\n    lesson = get_object_or_404(Lesson, pk=pk)\r\n    lesson.delete()\r\n    return redirect(page, pk=fix_day)\r\n\r\n\r\ndef settings(request, unit='dates'):\r\n    with open('MSP/universities.json', 'r', encoding='utf-8') as js:\r\n        universities = json.load(js)\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    schedule = Time.objects.filter(owner=user)\r\n    settings = get_object_or_404(Settings, owner=user)\r\n    if request.method == \"POST\":\r\n        if \"save_misc\" in request.POST:\r\n            settings.theme = request.POST[\"color\"]\r\n            settings.sub_color = palette[settings.theme]\r\n            settings.homepage = request.POST['homepage']\r\n            settings.save()\r\n            return redirect('settings', unit='misc')\r\n        if \"save_dates\" in request.POST:\r\n            f = 0\r\n            semester_form = SemesterForm(request.POST, instance=settings)\r\n            if semester_form.is_valid():\r\n                semester = semester_form.save(commit=False)\r\n                semester.save()\r\n                settings.start_date = semester.start_date\r\n                settings.end_date = semester.end_date\r\n                settings.save()\r\n                Day.objects.filter(owner=user).delete()\r\n                gap = settings.start_date.weekday()\r\n                start_monday = settings.start_date - timedelta(days=gap)\r\n                gap = 7 - settings.end_date.weekday()\r\n                end_sunday = settings.end_date + timedelta(days=gap)\r\n                start_date = int(datetime.combine(start_monday, datetime.now().time()).timestamp())\r\n                end_date = int(datetime.combine(end_sunday, datetime.now().time()).timestamp())\r\n                d = start_date\r\n                week = 1\r\n                while d <= end_date:\r\n                    day = Day()\r\n                    day.date = datetime.fromtimestamp(d).date()\r\n                    day.weekday = datetime.fromtimestamp(d).weekday()\r\n                    day.week = week\r\n                    day.owner = user\r\n                    day.save()\r\n                    if day.weekday == 6:\r\n                        week += 1\r\n                    d += 86400\r\n            try:\r\n                settings.exams_date = request.POST['exams_date']\r\n                settings.save()\r\n            except:\r\n                settings.exams_date = None\r\n                settings.save()\r\n            try:\r\n                to_del = request.POST['holidays_to_delete'].split('_')\r\n                for h in to_del:\r\n                    Holiday.objects.get(pk=h).delete()\r\n            except:\r\n                pass\r\n            for i in range(8):\r\n                try:\r\n                    holiday_start = request.POST[f'holiday_start{i}']\r\n                    holiday_end = request.POST[f'holiday_end{i}']\r\n                    holiday = Holiday(start_date=holiday_start, end_date=holiday_end, owner=user)\r\n                    holiday.save()\r\n                    settings.holidays.add(holiday)\r\n                    settings.save()\r\n                except:\r\n                    pass\r\n            return redirect('settings', unit='dates')\r\n        elif \"save_auto\" in request.POST:\r\n            settings_form = SettingsForm(request.POST, instance=settings)\r\n            if settings_form.is_valid():\r\n                settings = settings_form.save(commit=False)\r\n                settings.save()\r\n                schedule.delete()\r\n                create_times(settings, user)\r\n                for time in schedule:\r\n                    time_form = TimeForm(request.POST, instance=time)\r\n                    if time_form.is_valid():\r\n                        time_form = time_form.save(commit=False)\r\n                        time_form.save()\r\n            return redirect('settings', unit='schedule')\r\n        elif \"save_manual\" in request.POST:\r\n            for time in schedule:\r\n                time_form = TimeForm(request.POST, instance=time)\r\n                if time_form.is_valid():\r\n                    time = time_form.save(commit=False)\r\n                    time.start_time = request.POST[\"start_time\" + str(time.number)]\r\n                    time.end_time = request.POST[\"end_time\" + str(time.number)]\r\n                    time.owner = user\r\n                    time.save()\r\n            return redirect('settings', unit='schedule')\r\n        elif \"save_university\" in request.POST:\r\n            try:\r\n                settings.university = request.POST[\"select_university\"]\r\n            except:\r\n                pass\r\n            if request.POST[\"other\"] == \"True\":\r\n                settings.university = request.POST[\"other_university\"]\r\n            settings.save()\r\n            return redirect('settings', unit='misc')\r\n        elif \"import_timetable\" in request.POST:\r\n            group = request.POST['group']\r\n            load_subjects_html(group, user, settings)\r\n            return redirect('settings', unit='misc')\r\n    else:\r\n        settings = get_object_or_404(Settings, owner=user)\r\n        today = get_today(user)\r\n        settings_form = SettingsForm(instance=settings)\r\n        semester_form = SemesterForm(instance=settings)\r\n        schedule_forms = []\r\n        for time in schedule:\r\n            schedule_forms.append(TimeForm(request.POST, instance=time))\r\n        start_date = Day.objects.get(date=settings.start_date, owner=user)\r\n        end_date = Day.objects.get(date=settings.end_date, owner=user)\r\n        template = 'MSP/settings_boot.html'\r\n        user_agent = request.META['HTTP_USER_AGENT']\r\n        mobile = False\r\n        if 'Mobile' in user_agent:\r\n            mobile = True\r\n        return render(request, template,\r\n                      {'settings_form': settings_form, 'colors': colors, 'settings': settings, 'schedule': schedule,\r\n                       'schedule_forms': schedule_forms, 'semester_form': semester_form, 'today': today, 'user': user,\r\n                       'start_date': start_date, 'end_date': end_date, 'unit': unit, 'universities': universities,\r\n                       'mobile': mobile})\r\n\r\n\r\ndef tasks(request):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    settings = Settings.objects.get(owner=user)\r\n    today = get_today(user)\r\n    tomorrow = get_tomorrow(user)\r\n    tasks = Hometask.objects.filter(owner=user).order_by('date')\r\n    if len(tasks) == 0:\r\n        empty = True\r\n    else:\r\n        empty = False\r\n    for task in tuple(tasks):\r\n        try:\r\n            week_passed = task.date + timedelta(days=7) < today.date\r\n            if task.done == True and week_passed:\r\n                task.delete()\r\n        except:\r\n            pass\r\n    if request.method == \"GET\":\r\n        if 'delete_done' in request.GET:\r\n            for task in tuple(tasks):\r\n                if task.done:\r\n                    task.delete()\r\n            return redirect('tasks')\r\n        else:\r\n            for task in tasks:\r\n                if ('done_' + str(task.pk)) in request.GET:\r\n                    done = request.GET['done_' + str(task.pk)]\r\n                    task.done = done == 'True'\r\n                    task.save()\r\n    start_date = Day.objects.get(date=settings.start_date, owner=user)\r\n    end_date = Day.objects.get(date=settings.end_date, owner=user)\r\n    template = 'MSP/tasks_boot.html'\r\n    user_agent = request.META['HTTP_USER_AGENT']\r\n    mobile = False\r\n    if 'Mobile' in user_agent:\r\n        mobile = True\r\n    return render(request, template,\r\n                  {'today': today, 'tomorrow': tomorrow, 'settings': settings, 'tasks': tasks,\r\n                   'weekdays': weekdays_short, 'empty': empty, 'start_date': start_date, 'end_date': end_date,\r\n                   'mobile': mobile})\r\n\r\n\r\ndef task_new(request):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    subjects = Subject.objects.filter(owner=user)\r\n    lessons = Lesson.objects.filter(owner=user)\r\n    today = get_today(user)\r\n    settings = Settings.objects.get(owner=user)\r\n    if request.method == \"POST\":\r\n        form = TaskForm(request.POST)\r\n        if form.is_valid():\r\n            task = form.save(commit=False)\r\n\r\n            try:\r\n                deadline_date = request.POST[\"deadline_date\"]\r\n                task.date = datetime.strptime(deadline_date, '%Y-%m-%d')\r\n                task.weekday = task.date.weekday()\r\n            except:\r\n                pass\r\n            try:\r\n                deadline_subject = request.POST[\"deadline_subject\"]\r\n            except:\r\n                pass\r\n            try:\r\n                subject = subjects.get(pk=deadline_subject)\r\n                task.select_subject = subject\r\n                task.lesson = lessons.get(date=deadline_date, select_subject=subject, start_time=subject.start_time,\r\n                                          owner=user)\r\n                task.date = task.lesson.date\r\n                task.weekday = task.date.weekday()\r\n            except:\r\n                pass\r\n\r\n            try:\r\n                task.select_subject = task.lesson.select_subject\r\n                task.date = task.lesson.date\r\n                task.weekday = task.date.weekday()\r\n            except:\r\n                pass\r\n            task.owner = user\r\n            task.save()\r\n            return redirect('tasks')\r\n    else:\r\n        try:\r\n            time_now = datetime.now()\r\n            now_lesson = Lesson.objects.filter(date=time_now.date(), start_time__lte=time_now.time(),\r\n                                               end_time__gte=time_now.time())[0]\r\n            if now_lesson.type:\r\n                now_subject = list(Lesson.objects.filter(select_subject__title=now_lesson.title,\r\n                                                         select_subject__type=now_lesson.type).order_by('date'))\r\n            else:\r\n                now_subject = list(Lesson.objects.filter(select_subject__title=now_lesson.title).order_by('date'))\r\n            now_index = now_subject.index(now_lesson)\r\n            next = now_subject[now_index + 1]\r\n            next_subject = next.select_subject\r\n            next = next.pk\r\n        except:\r\n            next = None\r\n            next_subject = None\r\n        form = TaskForm(initial={'lesson': next})\r\n    start_date = Day.objects.get(date=settings.start_date, owner=user)\r\n    end_date = Day.objects.get(date=settings.end_date, owner=user)\r\n    template = 'MSP/task_edit_boot.html'\r\n    user_agent = request.META['HTTP_USER_AGENT']\r\n    mobile = True\r\n    if 'Mobile' in user_agent:\r\n        # form = TaskMobileForm(initial={'lesson': next})\r\n        mobile = True\r\n    return render(request, template,\r\n                  {'subjects': subjects, 'form': form, 'settings': settings, 'today': today, 'start_date': start_date,\r\n                   'end_date': end_date, 'next': next_subject, 'mobile': mobile})\r\n\r\n\r\ndef task_edit(request, pk):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    subjects = Subject.objects.filter(owner=user)\r\n    today = get_today(user)\r\n    settings = Settings.objects.get(owner=user)\r\n    task = get_object_or_404(Hometask, pk=pk)\r\n    lessons = Lesson.objects.filter(owner=user)\r\n    if request.method == \"POST\":\r\n        form = TaskForm(request.POST, instance=task)\r\n        if form.is_valid():\r\n            task = form.save(commit=False)\r\n            try:\r\n                deadline_date = request.POST[\"deadline_date\"]\r\n                task.date = datetime.strptime(deadline_date, '%Y-%m-%d')\r\n                task.weekday = task.date.weekday()\r\n            except:\r\n                pass\r\n            try:\r\n                deadline_subject = request.POST[\"deadline_subject\"]\r\n            except:\r\n                pass\r\n            try:\r\n                subject = subjects.get(pk=deadline_subject)\r\n                task.select_subject = subject\r\n                task.lesson = lessons.get(date=deadline_date, select_subject=subject, owner=user)\r\n                task.date = task.lesson.date\r\n                task.weekday = task.date.weekday()\r\n            except:\r\n                pass\r\n            try:\r\n                task.select_subject = task.lesson.select_subject\r\n                task.date = task.lesson.date\r\n                task.weekday = task.date.weekday()\r\n            except:\r\n                pass\r\n            task.save()\r\n            return redirect('tasks')\r\n    else:\r\n        form = TaskForm(instance=task)\r\n    start_date = Day.objects.get(date=settings.start_date, owner=user)\r\n    end_date = Day.objects.get(date=settings.end_date, owner=user)\r\n    template = 'MSP/task_edit_boot.html'\r\n    mobile = False\r\n    user_agent = request.META['HTTP_USER_AGENT']\r\n    if 'Mobile' in user_agent:\r\n        # form = TaskMobileForm(instance=task)\r\n        mobile = True\r\n    return render(request, template,\r\n                  {'subjects': subjects, 'pk': task.pk, 'form': form, 'task': task, 'settings': settings,\r\n                   'today': today, 'start_date': start_date, 'end_date': end_date, 'mobile': mobile})\r\n\r\n\r\ndef task_delete(request, pk):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    today = get_today(user)\r\n    task = get_object_or_404(Hometask, pk=pk)\r\n    task.delete()\r\n    return redirect('tasks')\r\n\r\n\r\ndef subject_double(request, pk):\r\n    subject = Subject.objects.get(pk=pk)\r\n    clone = subject.clone()\r\n    settings = Settings.objects.get(owner=subject.owner)\r\n    if settings.exams_date:\r\n        exams_start = settings.exams_date\r\n    else:\r\n        exams_start = settings.end_date\r\n    days = Day.objects.filter(owner=subject.owner, date__lte=exams_start)\r\n    for day in days:\r\n        day_week = day.week % settings.repeating_weeks\r\n        if day_week == 0:\r\n            day_week = settings.repeating_weeks\r\n        day_week = str(day_week)\r\n        if day.weekday == subject.weekday and day_week in subject.weeks:\r\n            lesson = Lesson()\r\n            lesson = create_lessons(subject, lesson)\r\n            lesson.select_subject = subject\r\n            lesson.title = subject.title\r\n            lesson.time = subject.time\r\n            lesson.start_time = subject.start_time\r\n            lesson.end_time = subject.end_time\r\n            lesson.date = day.date\r\n            lesson.type = subject.type\r\n            lesson.owner = subject.owner\r\n            lesson.save()\r\n    return redirect('subjects')\r\n\r\n\r\ndef subject_new(request):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    days = Day.objects.filter(owner=user)\r\n    today = get_today(user)\r\n    images = Image.objects.all()\r\n    settings = Settings.objects.get(owner=user)\r\n    schedule = Time.objects.filter(owner=user)\r\n    weekrange = range(1, settings.repeating_weeks + 1)\r\n    if request.method == \"POST\":\r\n        form = SubjectForm(request.POST)\r\n        if form.is_valid():\r\n            subject = form.save(commit=False)\r\n            if subject.teacher:\r\n                teacher = subject.teacher.split(' ')\r\n                subject.teachershort = ''.join([teacher[0], ' ', teacher[1][0], '.', teacher[2][0], '.'])\r\n            else:\r\n                subject.teachershort = ''\r\n            if subject.title:\r\n                subject.title_short = shorten_title(subject.title)\r\n            if settings.repeating_weeks > 1:\r\n                weeks_str = ''\r\n                for i in weekrange:\r\n                    if request.POST[str(i)]:\r\n                        weeks_str += str(i)\r\n                subject.weeks = weeks_str\r\n            color = request.POST[\"color\"]\r\n            subject.color = color\r\n            try:\r\n                subject_time = schedule.get(number=subject.time, owner=user)\r\n                if not subject.start_time:\r\n                    subject.start_time = subject_time.start_time\r\n                    subject.end_time = subject_time.end_time\r\n            except:\r\n                pass\r\n            if not subject.end_time:\r\n                subject_delta = timedelta(minutes=settings.lesson_length)\r\n                subject.end_time = (datetime.combine(date.today(), subject.start_time) + subject_delta).time()\r\n            subject.owner = user\r\n            subject.save()\r\n            if settings.exams_date:\r\n                exams_start = settings.exams_date\r\n            else:\r\n                exams_start = settings.end_date\r\n            for day in days:\r\n                if day.date <= exams_start:\r\n                    day_week = day.week % settings.repeating_weeks\r\n                    if day_week == 0:\r\n                        day_week = settings.repeating_weeks\r\n                    day_week = str(day_week)\r\n                    if day.weekday == subject.weekday and day_week in subject.weeks:\r\n                        lesson = Lesson()\r\n                        lesson = create_lessons(subject, lesson)\r\n                        lesson.select_subject = subject\r\n                        lesson.title = subject.title\r\n                        lesson.time = subject.time\r\n                        lesson.start_time = subject.start_time\r\n                        lesson.end_time = subject.end_time\r\n                        lesson.date = day.date\r\n                        lesson.type = subject.type\r\n                        lesson.owner = user\r\n                        lesson.save()\r\n            return redirect('subjects')\r\n    else:\r\n        form = SubjectForm()\r\n    start_date = Day.objects.get(date=settings.start_date, owner=user)\r\n    end_date = Day.objects.get(date=settings.end_date, owner=user)\r\n    user_agent = request.META['HTTP_USER_AGENT']\r\n    template = 'MSP/subject_edit_boot.html'\r\n    mobile = True\r\n    if 'Mobile' in user_agent:\r\n        mobile = True\r\n    return render(request, template,\r\n                  {'form': form, 'colors': colors, 'settings': settings, 'images': images, 'today': today,\r\n                   'range': weekrange, 'start_date': start_date, 'end_date': end_date,'mobile':mobile})\r\n\r\n\r\ndef task_new_lesson(request, lesson, date, time, menu, info):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    subjects = Subject.objects.filter(owner=user)\r\n    lessons = Lesson.objects.filter(owner=user)\r\n    today = get_today(user)\r\n    settings = Settings.objects.get(owner=user)\r\n    if request.method == \"POST\":\r\n        form = TaskForm(request.POST)\r\n        if form.is_valid():\r\n            task = form.save(commit=False)\r\n            this_lesson = lessons.get(title=lesson, date=date, start_time=time, owner=user)\r\n            deadline_subject = this_lesson.select_subject\r\n            this_or_next = request.POST[\"this_or_next\"]\r\n            try:\r\n                deadline_date = request.POST[\"deadline_date\"]\r\n            except:\r\n                pass\r\n            if this_or_next == 'this':\r\n                task.lesson = this_lesson\r\n            elif this_or_next == 'next':\r\n                if this_lesson.type:\r\n                    this_subject = list(Lesson.objects.filter(select_subject__title=this_lesson.title,\r\n                                                              select_subject__type=this_lesson.type).order_by('date'))\r\n                else:\r\n                    this_subject = list(Lesson.objects.filter(select_subject__title=this_lesson.title).order_by('date'))\r\n                this_index = this_subject.index(this_lesson)\r\n                next_lesson = this_subject[this_index + 1]\r\n                task.lesson = next_lesson\r\n            if task.lesson:\r\n                task.select_subject = task.lesson.select_subject\r\n                task.date = task.lesson.date\r\n            else:\r\n                task.select_subject = deadline_subject\r\n                if deadline_date != '':\r\n                    task.date = datetime.strptime(deadline_date, '%Y-%m-%d')\r\n            if task.date:\r\n                task.weekday = task.date.weekday()\r\n            task.owner = user\r\n            task.save()\r\n            if menu == '1':\r\n                return redirect('tasks')\r\n            else:\r\n                return redirect('info', pk=info)\r\n    else:\r\n        form = TaskForm()\r\n    start_date = Day.objects.get(date=settings.start_date, owner=user)\r\n    end_date = Day.objects.get(date=settings.end_date, owner=user)\r\n    template = 'MSP/task_edit_lesson_boot.html'\r\n    user_agent = request.META['HTTP_USER_AGENT']\r\n    mobile = True\r\n    if 'Mobile' in user_agent:\r\n        form = TaskMobileForm()\r\n        mobile = True\r\n    return render(request, template,\r\n                  {'subjects': subjects, 'form': form, 'settings': settings, 'today': today, 'menu': menu,\r\n                   'start_date': start_date, 'end_date': end_date, 'mobile': mobile})\r\n\r\n\r\ndef subjects(request):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    subjects = Subject.objects.filter(owner=user).order_by('weekday', 'start_time', 'end_time', 'title', )\r\n    today = get_today(user)\r\n    settings = Settings.objects.get(owner=user)\r\n    start_date = Day.objects.get(date=settings.start_date)\r\n    end_date = Day.objects.get(date=settings.end_date, owner=user)\r\n    start_date = Day.objects.get(date=settings.start_date, owner=user)\r\n    end_date = Day.objects.get(date=settings.end_date, owner=user)\r\n    user_agent = request.META['HTTP_USER_AGENT']\r\n    template = 'MSP/subjects_boot.html'\r\n    mobile = False\r\n    if 'Mobile' in user_agent:\r\n        mobile = True\r\n        # template='MSP/subjects_mobile.html'\r\n    return render(request, template,\r\n                  {'subjects': subjects, 'settings': settings, 'today': today, 'weekdays': weekdays,\r\n                   'start_date': start_date, 'end_date': end_date, 'start_date': start_date, 'end_date': end_date,\r\n                   'mobile': mobile})\r\n\r\n\r\ndef subject_edit(request, pk):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    days = Day.objects.filter(owner=user)\r\n    settings = Settings.objects.get(owner=user)\r\n    today = get_today(user)\r\n    images = Image.objects.all()\r\n    schedule = Time.objects.filter(owner=user)\r\n    lessons = Lesson.objects.filter(owner=user)\r\n    weekrange = range(1, settings.repeating_weeks + 1)\r\n    subject = get_object_or_404(Subject, pk=pk)\r\n    weekday_initial = subject.weekday\r\n    weeks_initial = subject.weeks\r\n    title_initial = subject.title\r\n    if request.method == \"POST\":\r\n        form = SubjectForm(request.POST, instance=subject)\r\n        if form.is_valid():\r\n            subject = form.save(commit=False)\r\n            if subject.teacher:\r\n                teacher = subject.teacher.split(' ')\r\n                try:\r\n                    subject.teachershort = ''.join([teacher[0], ' ', teacher[1][0], '.', teacher[2][0], '.'])\r\n                except:\r\n                    pass\r\n            else:\r\n                subject.teachershort = ''\r\n            if settings.repeating_weeks > 1:\r\n                weeks_str = ''\r\n                for i in weekrange:\r\n                    if request.POST[str(i)] != 'False':\r\n                        weeks_str += str(i)\r\n                subject.weeks = weeks_str\r\n            color = request.POST[\"color\"]\r\n            subject.color = color\r\n            try:\r\n                subject_time = schedule.get(number=subject.time, owner=user)\r\n                if not subject.start_time:\r\n                    subject.start_time = subject_time.start_time\r\n                    subject.end_time = subject_time.end_time\r\n            except:\r\n                pass\r\n            if not subject.end_time:\r\n                subject_delta = timedelta(minutes=settings.lesson_length)\r\n                subject.end_time = (datetime.combine(date.today(), subject.start_time) + subject_delta).time()\r\n            subject.save()\r\n            if not subject.title or subject.title != title_initial:\r\n                subject.title_short = shorten_title(subject.title)\r\n                subject.save()\r\n            if subject.weekday != weekday_initial or subject.weeks != weeks_initial:\r\n                lessons.filter(select_subject=subject).delete()\r\n                if settings.exams_date:\r\n                    exams_start = settings.exams_date\r\n                else:\r\n                    exams_start = settings.end_date\r\n                for day in days:\r\n                    if day.date <= exams_start:\r\n                        day_week = day.week % settings.repeating_weeks\r\n                        if day_week == 0:\r\n                            day_week = settings.repeating_weeks\r\n                        day_week = str(day_week)\r\n                        if day.weekday == subject.weekday and day_week in subject.weeks:\r\n                            lesson = Lesson()\r\n                            lesson = create_lessons(subject, lesson)\r\n                            lesson.select_subject = subject\r\n                            lesson.title = subject.title\r\n                            lesson.time = subject.time\r\n                            lesson.start_time = subject.start_time\r\n                            lesson.end_time = subject.end_time\r\n                            lesson.date = day.date\r\n                            lesson.type = subject.type\r\n                            lesson.owner = user\r\n                            lesson.save()\r\n            else:\r\n                for lesson in lessons:\r\n                    if lesson.select_subject == subject:\r\n                        lesson = create_lessons(subject, lesson)\r\n                        lesson.title = subject.title\r\n                        lesson.time = subject.time\r\n                        lesson.start_time = subject.start_time\r\n                        lesson.end_time = subject.end_time\r\n                        lesson.save()\r\n            same_subject = Subject.objects.filter(title=subject.title)\r\n            for s in same_subject:\r\n                s.color = subject.color\r\n                s.save()\r\n                s_lessons = Lesson.objects.filter(select_subject=s)\r\n                for sl in s_lessons:\r\n                    sl.color = subject.color\r\n                    sl.save()\r\n            return redirect('subjects')\r\n    else:\r\n        form = SubjectForm(instance=subject)\r\n    start_date = Day.objects.get(date=settings.start_date, owner=user)\r\n    end_date = Day.objects.get(date=settings.end_date, owner=user)\r\n    user_agent = request.META['HTTP_USER_AGENT']\r\n    template = 'MSP/subject_edit_boot.html'\r\n    mobile = True\r\n    if 'Mobile' in user_agent:\r\n        mobile = True\r\n    return render(request, template,\r\n                  {'subject': subject, 'form': form, 'colors': colors, 'settings': settings, 'images': images,\r\n                   'today': today, 'pk': pk, 'range': weekrange, 'start_date': start_date, 'end_date': end_date,'mobile':mobile})\r\n\r\n\r\ndef subject_delete(request, pk):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    subject = get_object_or_404(Subject, pk=pk)\r\n    subject.delete()\r\n    return redirect('subjects')\r\n\r\n\r\ndef exams(request):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    settings = Settings.objects.get(owner=user)\r\n    today = get_today(user)\r\n    tomorrow = get_tomorrow(user)\r\n    examinations = []\r\n    other = []\r\n    exams = Exam.objects.filter(owner=user).order_by('date')\r\n    for exam in exams:\r\n        if exam.examination:\r\n            examinations.append(exam)\r\n        else:\r\n            other.append(exam)\r\n    now = datetime.now().timestamp()\r\n    meta = None\r\n    days_left = None\r\n    semester = None\r\n    passed = None\r\n    empty = False\r\n    if len(exams) == 0:\r\n        empty = True\r\n    elif len(examinations) > 0:\r\n        first_exam = datetime.combine(examinations[0].date, datetime.now().time()).timestamp()\r\n        days_left = int((first_exam - now) // (60 * 60 * 24))\r\n        if days_left % 10 == 1 and days_left % 100 != 11:\r\n            meta = 1\r\n        elif days_left % 10 in [2, 3, 4] and days_left % 100 not in [12, 13, 14]:\r\n            meta = 2\r\n        else:\r\n            meta = 0\r\n        start_date = datetime.combine(settings.start_date, datetime.now().time()).timestamp()\r\n        end_date = datetime.combine(settings.end_date, datetime.now().time()).timestamp()\r\n        semester = int((first_exam - start_date) // (60 * 60 * 24))\r\n        passed = int((now - start_date) // (60 * 60 * 24))\r\n    start_date = Day.objects.get(date=settings.start_date, owner=user)\r\n    end_date = Day.objects.get(date=settings.end_date, owner=user)\r\n    treshold = datetime.today().date() - timedelta(days=7)\r\n    delete_exams = Exam.objects.filter(date__lt=treshold)\r\n    for ex in delete_exams:\r\n        ex.delete()\r\n    if days_left is None:\r\n        days_left = 0\r\n        percentage = 0\r\n    else:\r\n        percentage = round(100 * passed / semester)\r\n    mobile = True\r\n    user_agent = request.META['HTTP_USER_AGENT']\r\n    template = 'MSP/exams_boot.html'\r\n    if 'Mobile' in user_agent:\r\n        mobile = True\r\n    return render(request, template,\r\n                  {'today': today, 'tomorrow': tomorrow, 'settings': settings, 'exams': exams,\r\n                   'weekdays': weekdays_short, 'examinations': examinations, 'other': other, 'days_left': days_left,\r\n                   'meta': meta, 'semester': semester, 'passed': passed, 'empty': empty, 'start_date': start_date,\r\n                   'end_date': end_date, 'mobile': mobile, 'percentage': percentage})\r\n\r\n\r\ndef exam_edit(request, pk):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    subjects = Subject.objects.filter(owner=user)\r\n    today = get_today(user)\r\n    settings = Settings.objects.get(owner=user)\r\n    exam = get_object_or_404(Exam, pk=pk)\r\n    lessons = Lesson.objects.filter(owner=user)\r\n    if request.method == \"POST\":\r\n        form = ExamForm(request.POST, instance=exam)\r\n        if form.is_valid():\r\n            exam = form.save(commit=False)\r\n            try:\r\n                deadline_date = request.POST[\"deadline_date\"]\r\n                deadline_subject = request.POST[\"deadline_subject\"]\r\n                exam.date = datetime.strptime(deadline_date, '%Y-%m-%d')\r\n                exam.weekday = exam.date.weekday()\r\n            except:\r\n                pass\r\n            try:\r\n                subject = subjects.get(pk=deadline_subject)\r\n                exam.select_subject = subject\r\n                exam.lesson = lessons.get(date=deadline_date, select_subject=subject, owner=user)\r\n                exam.date = exam.lesson.date\r\n                exam.weekday = exam.date.weekday()\r\n            except:\r\n                pass\r\n            try:\r\n                exam.select_subject = exam.lesson.select_subject\r\n                exam.date = exam.lesson.date\r\n                exam.weekday = exam.date.weekday()\r\n            except:\r\n                pass\r\n            if exam.lesson:\r\n                exam.start_time = exam.lesson.start_time\r\n            try:\r\n                exam_time = Time.objects.get(number=exam.time, owner=user)\r\n                if not exam.start_time:\r\n                    exam.start_time = exam_time.start_time\r\n            except:\r\n                pass\r\n            exam.save()\r\n            if not exam.type:\r\n                if exam.examination:\r\n                    exam.type = 'экзамен'\r\n                else:\r\n                    exam.type = 'контрольная'\r\n            exam.save()\r\n            return redirect('exams')\r\n    else:\r\n        form = ExamForm(instance=exam)\r\n        examination = exam.examination == 'examination'\r\n    start_date = Day.objects.get(date=settings.start_date, owner=user)\r\n    end_date = Day.objects.get(date=settings.end_date, owner=user)\r\n    template = 'MSP/exam_edit_boot.html'\r\n    user_agent = request.META['HTTP_USER_AGENT']\r\n    mobile = True\r\n    if 'Mobile' in user_agent:\r\n        mobile = True\r\n    return render(request, template,\r\n                  {'subjects': subjects, 'pk': exam.pk, 'form': form, 'exam': exam, 'settings': settings,\r\n                   'today': today, 'examination': examination, 'start_date': start_date, 'end_date': end_date,\r\n                   'mobile': mobile})\r\n\r\n\r\ndef exam_new(request, exam, lessons, subjects, examination):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    try:\r\n        exam.examination = request.POST['examination']\r\n    except:\r\n        exam.examination = examination\r\n\r\n    try:\r\n        deadline_date = request.POST[\"deadline_date\"]\r\n        deadline_subject = request.POST[\"deadline_subject\"]\r\n        exam.date = datetime.strptime(deadline_date, '%Y-%m-%d')\r\n        exam.weekday = exam.date.weekday()\r\n    except:\r\n        pass\r\n    try:\r\n        subject = subjects.get(pk=deadline_subject)\r\n        exam.select_subject = subject\r\n        exam.lesson = lessons.get(date=deadline_date, select_subject=subject, owner=user)\r\n        exam.date = exam.lesson.date\r\n        exam.weekday = exam.date.weekday()\r\n    except:\r\n        pass\r\n\r\n    try:\r\n        exam.select_subject = exam.lesson.select_subject\r\n        exam.date = exam.lesson.date\r\n        exam.weekday = exam.date.weekday()\r\n    except:\r\n        pass\r\n    if exam.lesson:\r\n        exam.start_time = exam.lesson.start_time\r\n    try:\r\n        exam_time = Time.objects.get(number=exam.time, owner=user)\r\n        if not exam.start_time:\r\n            exam.start_time = exam_time.start_time\r\n    except:\r\n        pass\r\n    exam.owner = user\r\n    exam.save()\r\n    if not exam.type:\r\n        if exam.examination:\r\n            exam.type = 'экзамен'\r\n        else:\r\n            exam.type = 'контрольная'\r\n    exam.save()\r\n    return exam\r\n\r\n\r\ndef exam_new_1(request):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    subjects = Subject.objects.filter(owner=user)\r\n    today = get_today(user)\r\n    settings = Settings.objects.get(owner=user)\r\n    lessons = Lesson.objects.filter(owner=user)\r\n    if request.method == \"POST\":\r\n        form = ExamForm(request.POST)\r\n        if form.is_valid():\r\n            exam = form.save(commit=False)\r\n            exam = exam_new(request, exam, lessons, subjects, False)\r\n            exam.save()\r\n            return redirect('exams')\r\n    else:\r\n        form = ExamForm()\r\n    start_date = Day.objects.get(date=settings.start_date, owner=user)\r\n    end_date = Day.objects.get(date=settings.end_date, owner=user)\r\n    template = 'MSP/exam_edit_boot.html'\r\n    user_agent = request.META['HTTP_USER_AGENT']\r\n    mobile = True\r\n    if 'Mobile' in user_agent:\r\n        mobile = True\r\n    return render(request, template,\r\n                  {'subjects': subjects, 'form': form, 'settings': settings, 'today': today, 'start_date': start_date,\r\n                   'end_date': end_date, 'mobile': mobile})\r\n\r\n\r\ndef exam_new_2(request, examination):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    subjects = Subject.objects.filter(owner=user)\r\n    today = get_today(user)\r\n    settings = Settings.objects.get(owner=user)\r\n    lessons = Lesson.objects.filter(owner=user)\r\n    if request.method == \"POST\":\r\n        form = ExamForm(request.POST)\r\n        if form.is_valid():\r\n            exam = form.save(commit=False)\r\n            exam = exam_new(request, exam, lessons, subjects, examination == 'examination')\r\n            exam.examination = examination == 'examination'\r\n            exam.owner = user\r\n            exam.save()\r\n            return redirect('exams')\r\n    else:\r\n        examination = examination == 'examination'\r\n        if examination:\r\n            form = ExamForm({'type': 'экзамен'})\r\n        else:\r\n            form = ExamForm({'type': 'контрольная'})\r\n    start_date = Day.objects.get(date=settings.start_date, owner=user)\r\n    end_date = Day.objects.get(date=settings.end_date, owner=user)\r\n    template = 'MSP/exam_edit_boot.html'\r\n    user_agent = request.META['HTTP_USER_AGENT']\r\n    mobile = True\r\n    if 'Mobile' in user_agent:\r\n        mobile = True\r\n    return render(request, template,\r\n                  {'subjects': subjects, 'form': form, 'settings': settings, 'today': today,\r\n                   'examination': examination, 'start_date': start_date, 'end_date': end_date, 'mobile': mobile})\r\n\r\n\r\ndef exam_delete(request, pk):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    subject = get_object_or_404(Exam, pk=pk)\r\n    subject.delete()\r\n    return redirect('exams')\r\n\r\n\r\ndef plans(request):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    settings = Settings.objects.get(owner=user)\r\n    today = get_today(user)\r\n    tomorrow = get_tomorrow(user)\r\n    trips = []\r\n    events = []\r\n    plans = Plan.objects.filter(owner=user).order_by('start_date')\r\n    if len(plans) == 0:\r\n        empty = 1\r\n    else:\r\n        empty = 0\r\n    start_date = Day.objects.get(date=settings.start_date, owner=user)\r\n    end_date = Day.objects.get(date=settings.end_date, owner=user)\r\n    treshold = datetime.today().date() - timedelta(days=7)\r\n    delete_plans = Plan.objects.filter(end_date__lt=treshold)\r\n    for pl in delete_plans:\r\n        pl.delete()\r\n    return render(request, 'MSP/plans.html',\r\n                  {'today': today, 'tomorrow': tomorrow, 'settings': settings, 'plans': plans,\r\n                   'weekdays': weekdays_short, 'empty': empty, 'start_date': start_date, 'end_date': end_date})\r\n\r\n\r\ndef plan_edit(request, pk):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    today = get_today(user)\r\n    settings = Settings.objects.get(owner=user)\r\n    plan = get_object_or_404(Plan, pk=pk)\r\n    if request.method == \"POST\":\r\n        form = PlanForm(request.POST, instance=plan)\r\n        if form.is_valid():\r\n            plan = form.save(commit=False)\r\n            plan.start_date = request.POST[\"start_date\"]\r\n            end_date = request.POST[\"end_date\"]\r\n            if end_date != '':\r\n                plan.end_date = end_date\r\n            else:\r\n                plan.end_date = plan.start_date\r\n            color = request.POST[\"color\"]\r\n            plan.color = color\r\n            if plan.start_date:\r\n                plan.start_date = datetime.strptime(plan.start_date, '%Y-%m-%d')\r\n                plan.weekday = plan.start_date.weekday()\r\n            plan.save()\r\n            return redirect('plans')\r\n    else:\r\n        form = PlanForm(instance=plan)\r\n    start_date = Day.objects.get(date=settings.start_date, owner=user)\r\n    end_date = Day.objects.get(date=settings.end_date, owner=user)\r\n    return render(request, 'MSP/plan_edit.html',\r\n                  {'form': form, 'colors': colors, 'settings': settings, 'today': today, 'plan': plan, 'pk': pk,\r\n                   'start_date': start_date, 'end_date': end_date})\r\n\r\n\r\ndef plan_new(request):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    settings = Settings.objects.get(owner=user)\r\n    today = get_today(user)\r\n    if request.method == \"POST\":\r\n        form = PlanForm(request.POST)\r\n        if form.is_valid():\r\n            plan = form.save(commit=False)\r\n            plan.start_date = request.POST[\"start_date\"]\r\n            end_date = request.POST[\"end_date\"]\r\n            if end_date != '':\r\n                plan.end_date = end_date\r\n            else:\r\n                plan.end_date = plan.start_date\r\n            color = request.POST[\"color\"]\r\n            plan.color = color\r\n            if plan.start_date:\r\n                plan.start_date = datetime.strptime(plan.start_date, '%Y-%m-%d')\r\n                plan.weekday = plan.start_date.weekday()\r\n            plan.owner = user\r\n            plan.save()\r\n            return redirect('plans')\r\n    else:\r\n        form = PlanForm()\r\n    start_date = Day.objects.get(date=settings.start_date, owner=user)\r\n    end_date = Day.objects.get(date=settings.end_date, owner=user)\r\n    return render(request, 'MSP/plan_edit.html',\r\n                  {'form': form, 'colors': colors, 'settings': settings, 'today': today, 'start_date': start_date,\r\n                   'end_date': end_date})\r\n\r\n\r\ndef plan_delete(request, pk):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    plan = get_object_or_404(Plan, pk=pk)\r\n    plan.delete()\r\n    return redirect('plans')\r\n\r\n\r\ndef timetable_week(request, pk):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    days = Day.objects.filter(owner=user).order_by('date')\r\n    settings = Settings.objects.get(owner=user)\r\n    times = Time.objects.filter(owner=user)\r\n    today = get_today(user)\r\n    day = get_object_or_404(Day, pk=pk)\r\n    week = Day.objects.filter(week=day.week, owner=user, date__gte=settings.start_date, date__lte=settings.end_date)\r\n    try:\r\n        monday = week.get(weekday=0)\r\n    except:\r\n        if len(week) > 0:\r\n            first_weekday = week[0]\r\n        else:\r\n            first_weekday = days[0]\r\n        while len(week) < 7:\r\n            new_date = first_weekday.date - timedelta(days=1)\r\n            exists = days.filter(date=new_date)\r\n            if exists:\r\n                exists[0].week = first_weekday.week\r\n            else:\r\n                Day.objects.create(date=new_date, weekday=new_date.weekday(), week=first_weekday.week, owner=user)\r\n        week = Day.objects.filter(week=day.week, owner=user, date__gte=settings.start_date, date__lte=settings.end_date)\r\n        monday = week.get(weekday=0)\r\n    week_pk = monday.pk\r\n    weeklength = len(week) - 1\r\n    sunday = week[weeklength]\r\n    weekspan = range(0, 7)\r\n    lessons = Lesson.objects.filter(date__gte=monday.date, date__lte=sunday.date, owner=user).exclude(start_time=None)\r\n    plans = Plan.objects.filter(start_date__gte=monday.date, start_date__lte=sunday.date, owner=user).exclude(\r\n        start_time=None)\r\n    exams = Exam.objects.filter(date__gte=monday.date, date__lte=sunday.date, owner=user).exclude(start_time=None)\r\n    start_times = [lesson.start_time for lesson in lessons]\r\n    start_times.extend([plan.start_time for plan in plans])\r\n    start_times.extend([exam.start_time for exam in exams])\r\n    end_times = [lesson.end_time for lesson in lessons]\r\n    end_times.extend([plan.end_time for plan in plans])\r\n    academic_hour = timedelta(minutes=settings.lesson_length)\r\n    end_times.extend([(datetime.combine(date.today(), exam.start_time) + academic_hour).time() for exam in exams])\r\n    hours = None\r\n    if end_times != [] and start_times != []:\r\n        min_time = int(datetime.combine(date.today(), time(hour=min(start_times).hour)).timestamp())\r\n        if max(end_times).hour == 23:\r\n            max_time = int(datetime.combine(date.today(), time(hour=23)).timestamp())\r\n        else:\r\n            max_time = int(datetime.combine(date.today(), time(hour=max(end_times).hour + 1)).timestamp())\r\n        hours = [[None]]\r\n        for t in range(min_time, max_time, 3600):\r\n            hours[-1].extend([datetime.fromtimestamp(t).time(), datetime.fromtimestamp(t + 3600).time()])\r\n            hours.append([datetime.fromtimestamp(t).time()])\r\n        hours[-1].extend([datetime.fromtimestamp(t + 3600).time(), None])\r\n    time_delta = timedelta(hours=1)\r\n    hometasks = Hometask.objects.filter(owner=user)\r\n    exams = Exam.objects.filter(owner=user)\r\n    blanks = []\r\n    for day in week:\r\n        if len(Lesson.objects.filter(date=day.date)) == 0 and len(Exam.objects.filter(date=day.date)) == 0:\r\n            blanks.append(day)\r\n    next_w = week[0].date + timedelta(days=1)\r\n    prev_w = week[0].date - timedelta(days=1)\r\n    try:\r\n        days.get(date=next_w)\r\n        next_week = True\r\n    except:\r\n        next_week = False\r\n    try:\r\n        days.get(date=prev_w)\r\n        prev_week = True\r\n    except:\r\n        prev_week = False\r\n    return render(request, 'MSP/timetable_week.html',\r\n                  {'pk': week_pk, 'settings': settings, 'today': today, 'times': times, 'monday': monday,\r\n                   'sunday': sunday, 'week': week, 'weekspan': weekspan, 'weekdays': weekdays_short, 'lessons': lessons,\r\n                   'exams': exams, 'plans': plans, 'hours': hours, 'time_delta': time_delta, 'hometasks': hometasks,\r\n                   'exams': exams, 'days': days, 'blanks': blanks, 'next_week': next_week, 'prev_week': prev_week})\r\n\r\n\r\ndef timetable_month(request, pk):\r\n    if request.user.is_authenticated:\r\n        user = request.user\r\n    else:\r\n        return redirect('login')\r\n    settings = Settings.objects.get(owner=user)\r\n    times = Time.objects.filter(owner=user)\r\n    today = get_today(user)\r\n    day = get_object_or_404(Day, pk=pk)\r\n    whole_month = Day.objects.filter(date__month=day.date.month, owner=user)\r\n    month = whole_month[0].date.month\r\n    month_meta = months[month - 1]\r\n    month_pk = day.pk\r\n    next = len(whole_month)\r\n    previous = -len(Day.objects.filter(date__month=day.date.month - 1, owner=user))\r\n    weekspan = range(0, 7)\r\n    weekset = set([day.week for day in whole_month])\r\n    weeks = [Day.objects.filter(week=week, owner=user) for week in weekset]\r\n    lessons = Lesson.objects.filter(date__month__gte=month - 1, date__month__lte=month + 1, owner=user)\r\n    exams = Exam.objects.filter(date__month__gte=month - 1, date__month__lte=month + 1, owner=user)\r\n    plans = Plan.objects.filter(start_date__month__gte=month - 1, start_date__month__lte=month + 1, owner=user)\r\n    days = Day.objects.filter(owner=user).order_by('date')\r\n    return render(request, 'MSP/timetable_month.html',\r\n                  {'pk': month_pk, 'settings': settings, 'today': today, 'times': times, 'month': month,\r\n                   'month_meta': month_meta, 'next': next, 'previous': previous, 'weeks': weeks, 'weekspan': weekspan,\r\n                   'lessons': lessons, 'exams': exams, 'plans': plans, 'days': days})\r\n\r\n\r\ndef feedback(request):\r\n    if request.method == \"POST\":\r\n        send_mail('Новый отзыв', 'Here is the message.', 'from@example.com', ['thebadgirl1999@gmail.com'],\r\n                  fail_silently=False)\r\n    return render(request, 'MSP/feedback.html', {})\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MSP/views.py b/MSP/views.py
--- a/MSP/views.py	(revision 1e5e4ca15696148a83f008f3acf7c1f3c9f070a2)
+++ b/MSP/views.py	(date 1636623300986)
@@ -346,13 +346,16 @@
             step = "appearance"
 
     else:
-        start_date = Day.objects.get(date=settings.start_date, owner=user)
-        end_date = Day.objects.get(date=settings.end_date, owner=user)
-    return redirect(settings)
-    return render(request, 'MSP/start.html',
+        headlines={"dates":["Учебный календарь","Первый шаг","25%"],"university":["Где ты учишься?","Второй шаг","50%"],"schedule":["Расписание звонков","Третий шаг","75%"],"import":["Импорт расписания","Третий шаг","75%"],"appearance":["Последний штрих","Четвёртый шаг","100%"]}
+        user_agent = request.META['HTTP_USER_AGENT']
+        template = 'MSP/start_boot.html'
+        mobile = False
+        if 'Mobile' in user_agent:
+            mobile = True
+    return render(request, template,
                   {'semester_form': semester_form, 'step': step, 'schedule': schedule, 'schedule_forms': schedule_forms,
                    'settings': settings, 'settings_form': settings_form, 'nsu': nsu, 'colors': colors,
-                   'nsu_import': nsu_import, 'universities': universities, 'compliment_colors': palette})
+                   'nsu_import': nsu_import, 'universities': universities, 'compliment_colors': palette,'mobile':mobile,'headlines':headlines})
 
 
 def dashboard(request):
Index: db.sqlite3
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/db.sqlite3 b/db.sqlite3
--- a/db.sqlite3	(revision 1e5e4ca15696148a83f008f3acf7c1f3c9f070a2)
+++ b/db.sqlite3	(date 1636617785986)
@@ -1,4 +1,4 @@
-SQLite format 3   @   )�     ;   �  �                                               )� .O}   �    P���z
+SQLite format 3   @   )�     ;   �  �                                               )� .4    �    P���z
 H	�L�n��� �U�                                                  �i!!�ktableauth_groupauth_groupCREATE TABLE "auth_group" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "name" varchar(80) NOT NULL UNIQUE)3jG! indexsqlite_autoindex_auth_group_1auth_group       �$h++�tableauth_permissionauth_permissionCREATE TABLE "auth_permission" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "name" varchar(50) NOT NULL, "content_type_id" integer NOT NULL REFERENCES "django_content_type" ("id") DEFERRABLE INITIALLY DEFERRED, "codename" varchar(100) NOT NULL)�Hgo3�{indexdjango_content_type_app_label_model_76bd3d3b_uniqdjango_content_typeCREATE UNIQUE INDEX "django_content_type_app_label_model_76bd3d3b_uniq" ON "django_content_type" ("app_label", "model")�gf33�utabledjango_content_typedjango_content_typeCREATE TABLE "django_content_type" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "name" varchar(100) NOT NULL, "app_label" varchar(100) NOT NULL, "model" varchar(100) NOT NULL)�e!!�itableMSP_lessonMSP_lessonCREATE TABLE "MSP_lesson" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "link" varchar(200) NULL, "color" varchar(200) NOT NULL, "type" varchar(200) NOT NULL, "classroom" varchar(200) NOT NULL, "date" date NULL, "end_time" time NULL, "start_time" time NULL, "notes" text NULL, "teacher" varchar(200) NOT NULL, "teachershort" varchar(200) NOT NULL, "weekday" integer NOT NULL, "time" integer NOT NULL, "image" varchar(200) NULL, "select_subject" varchar(200) NULL, "title" varchar(200) NULL)�I_##�YtableMSP_subjectMSP_subject	CREATE TABLE "MSP_subject" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "title" varchar(200) NULL, "teacher" varchar(200) NOT NULL, "teachershort" varchar(200) NOT NULL, "link" varchar(200) NULL, "color" varchar(200) NOT NULL, "weekday" integer NOT NULL, "time" integer NOT NULL, "start_time" time NULL, "end_time" time NULL, "image" varchar(200) NULL, "type" varchar(200) NOT NULL, "classroom" varchar(200) NOT NULL)�p^%%�#tableMSP_settingsMSP_settingsCREATE TABLE "MSP_settings" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "repeating_weeks" integer NOT NULL, "first_lesson_start" time NOT NULL, "lesson_length" integer NOT NULL, "break_length" integer NOT NULL, "max_lessons" integer NOT NULL, "theme" varchar(7) NOT NULL, "end_date" date NOT NULL, "start_date" date NOT NULL)�YK%�)indexMSP_hometask_lesson_id_9823ebb8MSP_hometaskCREATE INDEX "MSP_hometask_lesson_id_9823ebb8" ON "MSP_hometask" ("lesson_id")�/X%%�!tableMSP_hometaskMSP_hometask
 CREATE TABLE "MSP_hometask" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "hometask" varchar(200) NULL, "lesson_id" integer NULL REFERENCES "MSP_lesson" ("id") DEFERRABLE INITIALLY DEFERRED, "identifier" integer NOT NULL, "notes" text NULL, "done" bool NOT NULL)�P�tableMSP_dayMSP_dayCREATE TABLE "MSP_day" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "date" date NOT NULL, "weekday" integer NOT NULL)�7O�AtableMSP_timeMSP_time
 CREATE TABLE "MSP_time" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "number" integer NOT NULL, "start_time" time NOT NULL, "end_time" time NOT NULL)�L�tableMSP_imageMSP_imageCREATE TABLE "MSP_image" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "image" varchar(100) NULL, "path" varchar(200) NULL)v*C�indexMSP_exam_lesson_id_04b341d5MSP_examCREATE INDEX "MSP_exam_lesson_id_04b341d5" ON "MSP_exam" ("lesson_id")�j)�'tableMSP_examMSP_examCREATE TABLE "MSP_exam" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "lesson_id" integer NULL REFERENCES "MSP_lesson" ("id") DEFERRABLE INITIALLY DEFERRED, "notes" text NULL, "exam" varchar(200) NULL)P++Ytablesqlite_sequencesqlite_sequenceCREATE TABLE sqlite_sequence(name,seq)�Y//�atabledjango_migrationsdjango_migrationsCREATE TABLE "django_migrations" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "app" varchar(255) NOT NULL, "name" varchar(255) NOT NULL, "applied"    &�!   �
@@ -813,7 +813,7 @@
 
  �)A	
 
-		3pbkdf2_sha256$150000$rl4X1Z2n1MeC$cd1Grv74pyY6H7MO5zf7Hj4JMlps5yNk0pUmr3UjLig=2021-11-03 12:37:15.565370admin12021-05-17 06:40:28Анна
+		3pbkdf2_sha256$216000$WPFZt7Gkcjrx$gWCCrUSH3qCsBYhht5daByhi1HYIwxr0ld+MmxbYiGY=2021-11-11 08:03:04.949280admin12021-05-17 06:40:28Анна
 � � ���������                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    � Ma.marshalova� <test6� 2test5� (test4� test3� test2
 � 
 test1
@@ -831,11 +831,13 @@
 	�	���BF?��                                                                               �W!�AindexMSP_lesson_select_subject_id_18cd165dMSP_lessonCREATE INDEX "MSP_lesson_select_subject_id_18cd165d" ON "MSP_lesson" ("select_subject_id")   ��tableMSP_planMSP_plan4CREATE TABLE "MSP_plan" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "name" varchar(200) NOT NULL, "notes" text NULL, "start_date" date NULL, "end_date" date N�o�
 %%�!tableMSP_hometaskMSP_hometaskMCREATE TABLE "MSP_hometask" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "done" bool NOT NULL, "hometask" varchar(200) NULL, "lesson_id" integer NULL REFERENCES "MSP_lesson" ("id") DEFERRABLE INITIALLY DEFERRED, "notes" text NULL, "date" date NULL, "weekday" integer NULL, "select_subject_id" integer NULL REFERENCES "MSP_subject" ("id") DEFERRABLE INITIALLY DEFERRED, "owner_id" integer NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED)o�?�indexMSP_day_owner_id_dd4619f2MSP_dayGCREATE INDEX "MSP_day_owner_id_dd4619f2" ON "MSP_day" ("owner_id")���]tableMSP_dayMSP_dayJCREATE TABLE "MSP_day" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "date" date NOT NULL, "weekday" integer NOT NULL, "week" integer NOT NULL, "owner_id" integer NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED)�x�EE�stabledjango_summernote_attachmentdjango_summernote_attachment<CREATE TABLE "django_summernote_attachment" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "file" varchar(100) NOT NULL, "uploaded" datetime NOT NULL, "name" varchar(255) NULL)��S)�9indexdjango_session_expire_date_a5c62663django_session+CREATE INDEX "django_session_expire_date_a5c62663" ON "django_session" ("expire_date");�O) indexsqlite_autoindex_django_session_1django_session�6�))�'tabledjango_sessiondjango_sessionCREATE TABLE "django_session" ("session_key" varchar(40) NOT NULL PRIMARY KEY, "session_data" text NOT NULL, "expire_date" datetime NOT NULL)1�E indexsqlite_autoindex_auth_user_1auth_user�*��#tableauth_userauth_userCREATE TABLE "auth_user" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "password" varchar(128) NOT NULL, "last_login" datetime NULL, "is_superuser" bool NOT NULL, "username" varchar(150) NOT NULL UNIQUE, "last_name" varchar(150) NOT NULL, "email" varchar(254) NOT NULL, "is_staff" bool NOT NULL, "is_active" bool NOT NULL, "date_joined" datetime NOT NULL, "first_name" varchar(150) NOT NULL)3�G! indexsqlite_autoindex_auth_group_1auth_group*��!!�mtableauth_groupauth_groupCREATE TABLE "auth_group" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "name" varchar(150) NOT NULL UNIQUE)�$�
 ]+�Mindexauth_permission_content_type_id_2f476e4bauth_permissionCREATE INDEX "auth_permission_content_type_id_2f476e4b" ON "auth_permission" ("content_type_id")�S�	y+�indexauth_permission_content_type_id_codename_01ab375a_uniqauth_permissionCREATE UNIQUE INDEX "auth_permission_content_type_id_codename_01ab375a_uniq" ON "auth_permission" ("content_type_id", "codename")�%�++�tableauth_permissionauth_permission)CREATE TABLE "auth_permission" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "content_type_id" integer NOT NULL REFERENCES "django_content_type" ("id") DEFERRABLE INITIALLY DEFERRED, "codename" varchar(100) NOT NULL, "name" varchar(255) NOT NULL)�H�o3�{indexdjango_content_type_app_label_model_76bd3d3b_uniqdjango_content_typeCREATE UNIQUE INDEX "django_content_type_app_label_model_76bd3d3b_uniq" ON "django_content_type" ("app_label", "model")�I�33�9tabledjango_content_typedjango_content_typeCREATE TABLE "django_content_type" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "app_label" varchar(100) NOT NULL, "model" varchar(100) NOT NULL)��O-�1indexdjango_admin_log_user_id_c564eba6django_admin_log'CREATE INDEX "django_admin_log_user_id_c564eba6" ON "django_admin_log" ("user_id")�(�_-�Qindexdjango_admin_log_content_type_id_c4bce8ebdjango_admin_log%CREATE INDEX "django_admin_log_content_type_id_c4bce8eb" ON "django_admin_log" ("content_type_id")
-   	� �
+   
+z �
 ��n
-J	&��                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      �;
+J	&��z                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              �#M�UAg5zpnqsf8iq0c4073gxkwvz4un32h5el.eJxVjMsOgjAQRf-la9O09MGMS_d-A-k8ENRAQmFl_HclYaHbe865L9OVbR26rerSjWLOxjtz-h2p8EOnnci9TLfZ8jyty0h2V-xBq73Oos_L4f4dDKUO39pl6DFqztkDh8YBC0ISxTYhs7gSwLcNEAVwKKTsY4SeHFIMqdFs3h_tmjeN:1ml533:PStRSUcA7z658KlR0qfaIyONd1N45dnzqnrJRpqb3jI2021-11-25 08:03:05.265846�;
 M�Alfdhnotw8j495ht0i4khn3vvkals7yjwNmZhN2JiMmZjZmEwYzc3Y2E3MThmMTZkMjFmYWMwMmZlMjAyNGQ1Mzp7Il9hdXRoX3VzZXJfaWQiOiIxMCIsIl9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9oYXNoIjoiNDM0ZjA0MDA0NWE0Y2YxNjE2MWYwOTQ0MjM5OGY4YmZiMjY1NDdmZiJ92021-11-17 12:37:15.574372�!	M�QAn7fulc8182nbjbvq8cl5c01ywzmm4t2y.eJxVjEEOwiAQRe_C2hCgguDSfc9AZphBqgaS0q6MdzckXej2v_f-W0TYtxL3zmtcSFyFVuL0OyKkJ9dB6AH13mRqdVsXlEORB-1ybsSv2-H-HRToZdRBeceKgpk4gAJUSIq9cfrMmslYP-ULem-NJTeBB7IONJmEkENGEp8vCXI4vA:1mfwuv:U1KwF5pkPCcMnNznOx-8hO6FXQlxBZGD2o7aJu2OFRA2021-11-11 04:21:29.835584�!M�QAdnuzg9qz8rg2qjx1v871lsuth84fijb1.eJxVjEEOwiAQRe_C2hCgguDSfc9AZphBqgaS0q6MdzckXej2v_f-W0TYtxL3zmtcSFyFVuL0OyKkJ9dB6AH13mRqdVsXlEORB-1ybsSv2-H-HRToZdRBeceKgpk4gAJUSIq9cfrMmslYP-ULem-NJTeBB7IONJmEkENGEp8vCXI4vA:1mWhFW:Yq1fT3t7uAsdco6lXy9vxJMTV5aN-dnQcUFVEDtMFUc2021-10-16 15:48:30.158766�!M�QAyuwiawztupoxxujhahi0utw9jf9ruwz3.eJxVjEEOwiAQRe_C2hCgguDSfc9AZphBqgaS0q6MdzckXej2v_f-W0TYtxL3zmtcSFyFVuL0OyKkJ9dB6AH13mRqdVsXlEORB-1ybsSv2-H-HRToZdRBeceKgpk4gAJUSIq9cfrMmslYP-ULem-NJTeBB7IONJmEkENGEp8vCXI4vA:1mR9ak:mp_fFIxfxiJiSHt-Mb6SehbO9FYdnaJqWLc56hWkQyE2021-10-01 08:51:30.115313�!M�QAnk7yj832ry10vaekt6ecbwhzc0f5ghks.eJxVjEEOwiAQRe_C2hCgguDSfc9AZphBqgaS0q6MdzckXej2v_f-W0TYtxL3zmtcSFyFVuL0OyKkJ9dB6AH13mRqdVsXlEORB-1ybsSv2-H-HRToZdRBeceKgpk4gAJUSIq9cfrMmslYP-ULem-NJTeBB7IONJmEkENGEp8vCXI4vA:1mJXOI:MYT1ymIdaP8wQBNmHGMevWRX8lXJi2wWatWba3rfJaQ2021-09-10 08:39:10.524869�!M�QAwz8lwgi3ngvvpjykoludf0eul61uc033.eJxVjEEOwiAQRe_C2hCgguDSfc9AZphBqgaS0q6MdzckXej2v_f-W0TYtxL3zmtcSFyFVuL0OyKkJ9dB6AH13mRqdVsXlEORB-1ybsSv2-H-HRToZdRBeceKgpk4gAJUSIq9cfrMmslYP-ULem-NJTeBB7IONJmEkENGEp8vCXI4vA:1mBwiK:NCI6HTsMa2k-J5z9cnjne0h7CRz-y1oOgob19Qa6qVE2021-08-20 10:04:28.344956�!M�QAnlbvxo51a9zs21fm3db0dv16bwfiqros.eJxVjEEOwiAQRe_C2hCgguDSfc9AZphBqgaS0q6MdzckXej2v_f-W0TYtxL3zmtcSFyFVuL0OyKkJ9dB6AH13mRqdVsXlEORB-1ybsSv2-H-HRToZdRBeceKgpk4gAJUSIq9cfrMmslYP-ULem-NJTeBB7IONJmEkENGEp8vCXI4vA:1m6ofb:W9joXwHMpgOfeXEyYVjBdofvFCY3pQ3xvW1xPFasB4w2021-08-06 06:28:27.853147�#M�UAi7kg9murvdh354hwoug4tfkup1om8p7u.eJxVjEEOwiAQRe_C2pCBQhGX7nsGMgyDVA0kpV0Z765NutDtf-_9lwi4rSVsnZcwJ3ERCsTpd4xID647SXestyap1XWZo9wVedAup5b4eT3cv4OCvXzrrKI5Z-ZR-dFZsBCRHTtCMKSTVhazp-S0BXBeD8poymzRkwI7JDOI9wcJTjfC:1lmbHf:ebFSEzLO86r9aBm4ph2qxvcj_2b4UDN8N0VqbaUOQu82021-06-11 12:08:11.223333�!M�QAkia1g4ic7q6j3ovlig5zjs5f4e36f4wt.eJxVjEEOwiAQRe_C2hAQKuDSfc9AZoZBqgaS0q6Md7dNutDtf-_9t4iwLiWunec4JXEVWpx-NwR6ct1BekC9N0mtLvOEclfkQbscW-LX7XD_Dgr0stVWk1WI2oK1EIxWaAAH9splRQykQsJgEl5c8KiRAw4un_1mZ8rkSHy-7DQ4sQ:1lWMBZ:rjD0gKlOJMvddpzoB2YldxQp7xIxrAoeprctP7zElDI2021-04-27 16:46:45.515078
-   	� �����Hm�#                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          $Mlfdhnotw8j495ht0i4khn3vvkals7yjw
+   
+� ������Hm�#                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   $Mg5zpnqsf8iq0c4073gxkwvz4un32h5el$Mlfdhnotw8j495ht0i4khn3vvkals7yjw
 $Mn7fulc8182nbjbvq8cl5c01ywzmm4t2y	$Mdnuzg9qz8rg2qjx1v871lsuth84fijb1$Myuwiawztupoxxujhahi0utw9jf9ruwz3$Mnk7yj832ry10vaekt6ecbwhzc0f5ghks$Mnlbvxo51a9zs21fm3db0dv16bwfiqros$Mwz8lwgi3ngvvpjykoludf0eul61uc033$Mi7kg9murvdh354hwoug4tfkup1om8p7u#M	kia1g4ic7q6j3ovlig5zjs5f4e36f4wt
       �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  	
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
@@ -1617,7 +1619,8 @@
  %add_userCan add user !)view_groupCan view group" %-delete_groupCan delete group"
  %-change_groupCan change group	 'add_groupCan add group( +3view_permissionCan view permission, /7delete_permissionCan delete permission, /7change_permissionCan change permission& )1add_permissionCan add permission$ 	'1view_logentryCan view log entry( 	+5delete_logentryCan delete log entry( 	+5change_logentryCan change log entry" 	%/add_logentryCan add log entry
    � �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         =	Пользователи
-   	� ����fG(	�                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                A2021-11-17 12:37:15.574372
+   
+� ����fG(	��                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               A2021-11-25 08:03:05.265846A2021-11-17 12:37:15.574372
 A2021-11-11 04:21:29.835584	A2021-10-16 15:48:30.158766A2021-10-01 08:51:30.115313A2021-09-10 08:39:10.524869A2021-08-20 10:04:28.344956A2021-08-06 06:28:27.853147A2021-06-11 12:08:11.223333A	2021-04-27 16:46:45.515078
    � ���`
 �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        O
Index: .idea/modern_student_planner.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\" />\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.10 (python_course)\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n  <component name=\"TestRunnerService\">\r\n    <option name=\"PROJECT_TEST_RUNNER\" value=\"Unittests\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modern_student_planner.iml b/.idea/modern_student_planner.iml
--- a/.idea/modern_student_planner.iml	(revision 1e5e4ca15696148a83f008f3acf7c1f3c9f070a2)
+++ b/.idea/modern_student_planner.iml	(date 1635963577344)
@@ -2,7 +2,7 @@
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
     <content url="file://$MODULE_DIR$" />
-    <orderEntry type="jdk" jdkName="Python 3.10 (python_course)" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.7 (modern_student_planner)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
   <component name="TestRunnerService">
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"72da8ece-e22a-44b2-a99c-83318c3eb1a1\" name=\"Default Changelist\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/modern_student_planner.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/modern_student_planner.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_11_2021_22_57__Default_Changelist_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_11_2021_22_57__Default_Changelist_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/vcs.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/vcs.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0001_initial.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/MSP/migrations/0001_initial.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0002_auto_20210301_1902.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0003_auto_20210301_1926.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0004_hometask_identifier.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0005_auto_20210304_2147.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0006_lesson_teachershort.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0007_auto_20210310_2102.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0008_auto_20210311_1821.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0009_auto_20210311_1904.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0010_auto_20210311_2015.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0011_lesson_weekday.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0012_lesson_time.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0013_auto_20210404_1747.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0014_auto_20210404_1749.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0015_image_path.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0016_auto_20210404_2013.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0017_remove_time_settings.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0018_day.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0019_auto_20210406_1612.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0020_auto_20210406_1619.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0021_auto_20210406_1636.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0022_auto_20210407_2333.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0023_auto_20210413_2041.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0024_auto_20210413_2337.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0025_auto_20210414_1539.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0026_auto_20210414_1849.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0027_hometask_weekday.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0028_auto_20210415_2004.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0029_hometask_select_subject.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0030_auto_20210420_2146.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0031_auto_20210420_2206.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0032_auto_20210421_2137.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0033_auto_20210423_1957.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0034_exam_type.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0035_auto_20210423_2113.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0036_auto_20210423_2301.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0037_auto_20210424_2301.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0038_auto_20210425_1430.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0039_auto_20210426_1603.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0040_auto_20210426_1605.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0041_plan_color.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0042_auto_20210501_1727.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0043_auto_20210505_1539.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0044_auto_20210513_1638.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0045_auto_20210513_1649.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0046_auto_20210621_0037.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0047_auto_20210624_1846.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0048_settings_homepage.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0049_auto_20210704_0302.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0050_settings_holidays.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0051_auto_20210704_1857.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/migrations/0052_auto_20210704_1858.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/models.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/MSP/models.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/templates/MSP/exams_boot.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/MSP/templates/MSP/exams_boot.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/templates/MSP/lesson_edit_boot.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/MSP/templates/MSP/lesson_edit_boot.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/templates/MSP/settings_boot.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/MSP/templates/MSP/settings_boot.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/templates/MSP/subjects_boot.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/MSP/templates/MSP/subjects_boot.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/templates/MSP/task_edit_boot.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/MSP/templates/MSP/task_edit_boot.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/templates/MSP/task_edit_lesson_boot.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/MSP/templates/MSP/task_edit_lesson_boot.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/templates/MSP/tasks_boot.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/MSP/templates/MSP/tasks_boot.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/templates/MSP/timetable_boot.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/MSP/templates/MSP/timetable_boot.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/urls.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/MSP/urls.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/MSP/views.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/MSP/views.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/db.sqlite3\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/db.sqlite3\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n        <option value=\"HTML File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"PerforceDirect.Settings\">\r\n    <option name=\"ENABLED\" value=\"false\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1ojwDGnd8sfaljCKcLW3gYuHzMx\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"DefaultHtmlFileTemplate\" value=\"HTML File\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/MSP/templates/MSP\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Анна\\PycharmProjects\\para-planner\\MSP\\templates\\MSP\" />\r\n      <recent name=\"C:\\Users\\Анна\\PycharmProjects\\modern_student_planner\\MSP\\templates\\MSP\" />\r\n      <recent name=\"C:\\Users\\Анна\\PycharmProjects\\modern_student_planner\\MSP\\templates\\registration\" />\r\n      <recent name=\"C:\\Users\\Анна\\PycharmProjects\\modern_student_planner\\MSP\" />\r\n      <recent name=\"C:\\Users\\Анна\\PycharmProjects\\modern_student_planner\\MSP\\static\\images\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Анна\\PycharmProjects\\modern_student_planner\\MSP\\templates\\MSP\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.sort\">\r\n    <configuration name=\"nsu_timetable (1)\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\">\r\n      <module name=\"modern_student_planner\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/MSP\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/MSP/nsu_timetable.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"nsu_timetable_parser\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\">\r\n      <module name=\"modern_student_planner\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/MSP\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/MSP/nsu_timetable_parser.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"runserver\" type=\"PythonConfigurationType\" factoryName=\"Python\">\r\n      <module name=\"modern_student_planner\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/myvenv/Lib/site-packages/django/core/management/commands\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/myvenv/Lib/site-packages/django/core/management/commands/runserver.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"sort\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\">\r\n      <module name=\"modern_student_planner\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/MSP\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/MSP/sort.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"syllables\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\">\r\n      <module name=\"modern_student_planner\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/MSP\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/MSP/syllables.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"universities_names_parser\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\">\r\n      <module name=\"modern_student_planner\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/MSP\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/MSP/universities_names_parser.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.sort\" />\r\n        <item itemvalue=\"Python.universities_names_parser\" />\r\n        <item itemvalue=\"Python.syllables\" />\r\n        <item itemvalue=\"Python.nsu_timetable_parser\" />\r\n        <item itemvalue=\"Python.nsu_timetable (1)\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration />\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"72da8ece-e22a-44b2-a99c-83318c3eb1a1\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1613813185638</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1613813185638</updated>\r\n      <workItem from=\"1635923927725\" duration=\"4000\" />\r\n      <workItem from=\"1635925622125\" duration=\"1441000\" />\r\n      <workItem from=\"1635941878348\" duration=\"15136000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"UnknownFeatures\">\r\n    <option featureType=\"com.intellij.fileTypeFactory\" implementationName=\"*.css\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/MSP/sort.py</url>\r\n          <line>6</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 1e5e4ca15696148a83f008f3acf7c1f3c9f070a2)
+++ b/.idea/workspace.xml	(date 1636623456624)
@@ -7,71 +7,7 @@
     <list default="true" id="72da8ece-e22a-44b2-a99c-83318c3eb1a1" name="Default Changelist" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/modern_student_planner.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/modern_student_planner.iml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_11_2021_22_57__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_02_11_2021_22_57__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/vcs.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0001_initial.py" beforeDir="false" afterPath="$PROJECT_DIR$/MSP/migrations/0001_initial.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0002_auto_20210301_1902.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0003_auto_20210301_1926.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0004_hometask_identifier.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0005_auto_20210304_2147.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0006_lesson_teachershort.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0007_auto_20210310_2102.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0008_auto_20210311_1821.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0009_auto_20210311_1904.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0010_auto_20210311_2015.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0011_lesson_weekday.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0012_lesson_time.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0013_auto_20210404_1747.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0014_auto_20210404_1749.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0015_image_path.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0016_auto_20210404_2013.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0017_remove_time_settings.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0018_day.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0019_auto_20210406_1612.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0020_auto_20210406_1619.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0021_auto_20210406_1636.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0022_auto_20210407_2333.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0023_auto_20210413_2041.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0024_auto_20210413_2337.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0025_auto_20210414_1539.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0026_auto_20210414_1849.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0027_hometask_weekday.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0028_auto_20210415_2004.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0029_hometask_select_subject.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0030_auto_20210420_2146.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0031_auto_20210420_2206.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0032_auto_20210421_2137.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0033_auto_20210423_1957.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0034_exam_type.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0035_auto_20210423_2113.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0036_auto_20210423_2301.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0037_auto_20210424_2301.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0038_auto_20210425_1430.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0039_auto_20210426_1603.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0040_auto_20210426_1605.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0041_plan_color.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0042_auto_20210501_1727.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0043_auto_20210505_1539.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0044_auto_20210513_1638.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0045_auto_20210513_1649.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0046_auto_20210621_0037.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0047_auto_20210624_1846.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0048_settings_homepage.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0049_auto_20210704_0302.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0050_settings_holidays.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0051_auto_20210704_1857.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/migrations/0052_auto_20210704_1858.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/models.py" beforeDir="false" afterPath="$PROJECT_DIR$/MSP/models.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/templates/MSP/exams_boot.html" beforeDir="false" afterPath="$PROJECT_DIR$/MSP/templates/MSP/exams_boot.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/templates/MSP/lesson_edit_boot.html" beforeDir="false" afterPath="$PROJECT_DIR$/MSP/templates/MSP/lesson_edit_boot.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/templates/MSP/settings_boot.html" beforeDir="false" afterPath="$PROJECT_DIR$/MSP/templates/MSP/settings_boot.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/templates/MSP/subjects_boot.html" beforeDir="false" afterPath="$PROJECT_DIR$/MSP/templates/MSP/subjects_boot.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/templates/MSP/task_edit_boot.html" beforeDir="false" afterPath="$PROJECT_DIR$/MSP/templates/MSP/task_edit_boot.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/templates/MSP/task_edit_lesson_boot.html" beforeDir="false" afterPath="$PROJECT_DIR$/MSP/templates/MSP/task_edit_lesson_boot.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/templates/MSP/tasks_boot.html" beforeDir="false" afterPath="$PROJECT_DIR$/MSP/templates/MSP/tasks_boot.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/templates/MSP/timetable_boot.html" beforeDir="false" afterPath="$PROJECT_DIR$/MSP/templates/MSP/timetable_boot.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/MSP/urls.py" beforeDir="false" afterPath="$PROJECT_DIR$/MSP/urls.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/MSP/views.py" beforeDir="false" afterPath="$PROJECT_DIR$/MSP/views.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/db.sqlite3" beforeDir="false" afterPath="$PROJECT_DIR$/db.sqlite3" afterDir="false" />
     </list>
@@ -104,7 +40,7 @@
     <property name="DefaultHtmlFileTemplate" value="HTML File" />
     <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
     <property name="WebServerToolWindowFactoryState" value="false" />
-    <property name="last_opened_file_path" value="$PROJECT_DIR$/MSP/templates/MSP" />
+    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
     <property name="node.js.detected.package.eslint" value="true" />
     <property name="node.js.detected.package.tslint" value="true" />
     <property name="node.js.selected.package.eslint" value="(autodetect)" />
@@ -280,6 +216,8 @@
       <workItem from="1635923927725" duration="4000" />
       <workItem from="1635925622125" duration="1441000" />
       <workItem from="1635941878348" duration="15136000" />
+      <workItem from="1636110699752" duration="2603000" />
+      <workItem from="1636617686820" duration="5704000" />
     </task>
     <servers />
   </component>
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.10 (python_course)\" project-jdk-type=\"Python SDK\" />\r\n  <component name=\"PyCharmProfessionalAdvertiser\">\r\n    <option name=\"shown\" value=\"true\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 1e5e4ca15696148a83f008f3acf7c1f3c9f070a2)
+++ b/.idea/misc.xml	(date 1635963577440)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10 (python_course)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.7 (modern_student_planner)" project-jdk-type="Python SDK" />
   <component name="PyCharmProfessionalAdvertiser">
     <option name="shown" value="true" />
   </component>
